C251 COMPILER V5.60.0,  STC32G_SPI                                                         24/03/23  00:55:34  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE STC32G_SPI
OBJECT MODULE PLACED IN .\Objects\STC32G_SPI.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE Sources\Driver\src\STC32G_SPI.c XSMALL FUNCTIONS(REENTRANT) OPTIMIZE(4
                    -,SPEED) BROWSE INCDIR(.\Sources\User;.\Sources\User\include;.\Sources\FreeRTOS\include;.\Sources\FreeRTOS\portable\STC32
                    -G12K128;.\Sources\Driver\inc;.\Sources\Task\inc;.\Sources\ch395) DEBUG PRINT(.\Listings\STC32G_SPI.lst) TABS(2) OBJECT(.
                    -\Objects\STC32G_SPI.obj) 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCMCU.com --------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- QQ:  800003751 -------------------------------------------------*/
   10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
   11          /*---------------------------------------------------------------------*/
   12          
   13          #include  "STC32G_SPI.h"
   14          
   15          uint8_t   SPI_RxTimerOut;
   16          uint8_t   SPI_BUF_type SPI_RxBuffer[SPI_BUF_LENTH];
   17          bit B_SPI_Busy; //发送忙标志
   18          
   19          
   20          //========================================================================
   21          // 函数: void SPI_Init(SPI_InitTypeDef *SPIx)
   22          // 描述: SPI初始化程序.
   23          // 参数: SPIx: 结构参数,请参考spi.h里的定义.
   24          // 返回: none.
   25          // 版本: V1.0, 2012-11-22
   26          //========================================================================
   27          void  SPI_Init(SPI_InitTypeDef *SPIx)
   28          {
   29   1        if(SPIx->SPI_SSIG == ENABLE)      SSIG = 0;   //enable SS, conform Master or Slave by SS pin.
   30   1        else                  SSIG = 1;   //disable SS, conform Master or Slave by SPI_Mode
   31   1        SPI_Start(SPIx->SPI_Enable);
   32   1        SPI_FirstBit_Set(SPIx->SPI_FirstBit);
   33   1        SPI_Mode_Set(SPIx->SPI_Mode);
   34   1        SPI_CPOL_Set(SPIx->SPI_CPOL);
   35   1        SPI_CPHA_Set(SPIx->SPI_CPHA);
   36   1        SPI_Clock_Select(SPIx->SPI_Speed);
   37   1        
   38   1        SPI_RxTimerOut = 0;
   39   1        B_SPI_Busy = 0;
   40   1      }
   41          
   42          //========================================================================
   43          // 函数: void SPI_SetMode(uint8_t mode)
   44          // 描述: SPI设置主从模式函数.
   45          // 参数: mode: 指定模式, 取值 SPI_Mode_Master 或 SPI_Mode_Slave.
   46          // 返回: none.
   47          // 版本: V1.0, 2012-11-22
   48          //========================================================================
   49          void SPI_SetMode(uint8_t mode)
   50          {
   51   1        if(mode == SPI_Mode_Slave)
   52   1        {
   53   2          MSTR = 0;   //重新设置为从机待机
   54   2          SSIG = 0;   //SS引脚确定主从
   55   2        }
   56   1        else
C251 COMPILER V5.60.0,  STC32G_SPI                                                         24/03/23  00:55:34  PAGE 2   

   57   1        {
   58   2          MSTR = 1;   //使能 SPI 主机模式
   59   2          SSIG = 1;   //忽略SS引脚功能
   60   2        }
   61   1      }
   62          
   63          //========================================================================
   64          // 函数: void SPI_WriteByte(uint8_t dat)
   65          // 描述: SPI发送一个字节数据.
   66          // 参数: dat: 要发送的数据.
   67          // 返回: none.
   68          // 版本: V1.0, 2020-09-14
   69          //========================================================================
   70          void SPI_WriteByte(uint8_t dat)   //SPI发送一个字节数据
   71          {
   72   1        if(ESPI)
   73   1        {
   74   2          B_SPI_Busy = 1;
   75   2          SPDAT = dat;
   76   2          while(B_SPI_Busy);  //中断模式
   77   2        }
   78   1        else
   79   1        {
   80   2          SPDAT = dat;
   81   2          while(SPIF == 0); //查询模式
   82   2          SPI_ClearFlag();   //清除SPIF和WCOL标志
   83   2        }
   84   1      }
   85          
   86          //========================================================================
   87          // 函数: void SPI_ReadByte(uint8_t dat)
   88          // 描述: SPI查询模式读取一个字节数据.
   89          // 参数: none.
   90          // 返回: 读取的数据.
   91          // 版本: V1.0, 2020-09-14
   92          //========================================================================
   93          uint8_t SPI_ReadByte(void)
   94          {
   95   1        SPDAT = 0xff;
   96   1        while(SPIF == 0) ;
   97   1        SPI_ClearFlag();   //清0 SPIF和WCOL标志
   98   1        return (SPDAT);
   99   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       157     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        65     ------
  bit size             =         1     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
