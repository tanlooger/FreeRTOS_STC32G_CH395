C251 COMPILER V5.60.0,  STC32G_Timer                                                       24/03/23  00:55:34  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE STC32G_Timer
OBJECT MODULE PLACED IN .\Objects\STC32G_Timer.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE Sources\Driver\src\STC32G_Timer.c XSMALL FUNCTIONS(REENTRANT) OPTIMIZE
                    -(4,SPEED) BROWSE INCDIR(.\Sources\User;.\Sources\User\include;.\Sources\FreeRTOS\include;.\Sources\FreeRTOS\portable\STC
                    -32G12K128;.\Sources\Driver\inc;.\Sources\Task\inc;.\Sources\ch395) DEBUG PRINT(.\Listings\STC32G_Timer.lst) TABS(2) OBJE
                    -CT(.\Objects\STC32G_Timer.obj) 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCMCU.com --------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- QQ:  800003751 -------------------------------------------------*/
   10          /* Â¶ÇÊûúË¶ÅÂú®Á®ãÂ∫è‰∏≠‰ΩøÁî®Ê≠§‰ª£Á†Å,ËØ∑Âú®Á®ãÂ∫è‰∏≠Ê≥®Êòé‰ΩøÁî®‰∫ÜSTCÁöÑËµÑÊñôÂèäÁ®ãÂ∫è            */
   11          /*---------------------------------------------------------------------*/
   12          
   13          #include  "STC32G_Timer.h"
   14          
   15          //========================================================================
   16          // ÂáΩÊï∞: uint8_t  Timer_Inilize(uint8_t TIM, TIM_InitTypeDef *TIMx)
   17          // ÊèèËø∞: ÂÆöÊó∂Âô®ÂàùÂßãÂåñÁ®ãÂ∫è.
   18          // ÂèÇÊï∞: TIMx: ÁªìÊûÑÂèÇÊï∞,ËØ∑ÂèÇËÄÉtimer.hÈáåÁöÑÂÆö‰πâ.
   19          // ËøîÂõû: ÊàêÂäüËøîÂõû SUCCESS, ÈîôËØØËøîÂõû FAIL.
   20          // ÁâàÊú¨: V1.0, 2012-10-22
   21          //========================================================================
   22          uint8_t Timer_Inilize(uint8_t TIM, TIM_InitTypeDef *TIMx)
   23          {
   24   1        if(TIM == Timer0)
   25   1        {
   26   2          Timer0_Stop();    //ÂÅúÊ≠¢ËÆ°Êï∞
   27   2          if(TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask) return FAIL;  //ÈîôËØØ
   28   2          TMOD = (TMOD & ~0x03) | TIMx->TIM_Mode; //Â∑•‰ΩúÊ®°Âºè,0: 16‰ΩçËá™Âä®ÈáçË£Ö, 1: 16‰ΩçÂÆöÊó∂/ËÆ°Êï∞, 2: 
             -8‰ΩçËá™Âä®ÈáçË£Ö, 3: ‰∏çÂèØÂ±èËîΩ16‰ΩçËá™Âä®ÈáçË£Ö
   29   2          if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)  return FAIL;
   30   2          Timer0_CLK_Select(TIMx->TIM_ClkSource); //ÂØπÂ§ñËÆ°Êï∞ÊàñÂàÜÈ¢ë, ÂÆöÊó∂12T/1T
   31   2          Timer0_CLK_Output(TIMx->TIM_ClkOut);    //ËæìÂá∫Êó∂Èíü‰ΩøËÉΩ
   32   2          T0_Load(TIMx->TIM_Value);
   33   2          Timer0_Run(TIMx->TIM_Run);
   34   2          return  SUCCESS;    //ÊàêÂäü
   35   2        }
   36   1      
   37   1        if(TIM == Timer1)
   38   1        {
   39   2          Timer1_Stop();    //ÂÅúÊ≠¢ËÆ°Êï∞
   40   2          if(TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask) return FAIL;  //ÈîôËØØ
   41   2          TMOD = (TMOD & ~0x30) | (TIMx->TIM_Mode << 4);  //Â∑•‰ΩúÊ®°Âºè,0: 16‰ΩçËá™Âä®ÈáçË£Ö, 1: 16‰ΩçÂÆöÊó∂/ËÆ°Ê
             -ï∞, 2: 8‰ΩçËá™Âä®ÈáçË£Ö, 3: ÂÅúÊ≠¢Â∑•‰Ωú
   42   2          if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)  return FAIL;
   43   2          Timer1_CLK_Select(TIMx->TIM_ClkSource); //ÂØπÂ§ñËÆ°Êï∞ÊàñÂàÜÈ¢ë, ÂÆöÊó∂12T/1T
   44   2          Timer1_CLK_Output(TIMx->TIM_ClkOut);    //ËæìÂá∫Êó∂Èíü‰ΩøËÉΩ
   45   2          T1_Load(TIMx->TIM_Value);
   46   2          Timer1_Run(TIMx->TIM_Run);
   47   2          return  SUCCESS;    //ÊàêÂäü
   48   2        }
   49   1      
   50   1        if(TIM == Timer2)   //Timer2,Âõ∫ÂÆö‰∏∫16‰ΩçËá™Âä®ÈáçË£Ö, ‰∏≠Êñ≠Êó†‰ºòÂÖàÁ∫ß
   51   1        {
   52   2          Timer2_Stop();  //ÂÅúÊ≠¢ËÆ°Êï∞
   53   2          Timer2_CLK_Select(TIMx->TIM_ClkSource); //ÂØπÂ§ñËÆ°Êï∞ÊàñÂàÜÈ¢ë, ÂÆöÊó∂12T/1T
   54   2          Timer2_CLK_Output(TIMx->TIM_ClkOut);    //ËæìÂá∫Êó∂Èíü‰ΩøËÉΩ
C251 COMPILER V5.60.0,  STC32G_Timer                                                       24/03/23  00:55:34  PAGE 2   

   55   2      
   56   2          T2_Load(TIMx->TIM_Value);
   57   2          Timer2_Run(TIMx->TIM_Run);
   58   2          return  SUCCESS;    //ÊàêÂäü
   59   2        }
   60   1      
   61   1        if(TIM == Timer3)   //Timer3,Âõ∫ÂÆö‰∏∫16‰ΩçËá™Âä®ÈáçË£Ö, ‰∏≠Êñ≠Êó†‰ºòÂÖàÁ∫ß
   62   1        {
   63   2          Timer3_Stop();  //ÂÅúÊ≠¢ËÆ°Êï∞
   64   2          if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)  return FAIL;
   65   2          Timer3_CLK_Select(TIMx->TIM_ClkSource); //ÂØπÂ§ñËÆ°Êï∞ÊàñÂàÜÈ¢ë, ÂÆöÊó∂12T/1T
   66   2          Timer3_CLK_Output(TIMx->TIM_ClkOut);    //ËæìÂá∫Êó∂Èíü‰ΩøËÉΩ
   67   2      
   68   2          T3_Load(TIMx->TIM_Value);
   69   2          Timer3_Run(TIMx->TIM_Run);
   70   2          return  SUCCESS;    //ÊàêÂäü
   71   2        }
   72   1      
   73   1        if(TIM == Timer4)   //Timer3,Âõ∫ÂÆö‰∏∫16‰ΩçËá™Âä®ÈáçË£Ö, ‰∏≠Êñ≠Êó†‰ºòÂÖàÁ∫ß
   74   1        {
   75   2          Timer4_Stop();  //ÂÅúÊ≠¢ËÆ°Êï∞
   76   2          if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)  return FAIL;
   77   2          Timer4_CLK_Select(TIMx->TIM_ClkSource); //ÂØπÂ§ñËÆ°Êï∞ÊàñÂàÜÈ¢ë, ÂÆöÊó∂12T/1T
   78   2          Timer4_CLK_Output(TIMx->TIM_ClkOut);    //ËæìÂá∫Êó∂Èíü‰ΩøËÉΩ
   79   2      
   80   2          T4_Load(TIMx->TIM_Value);
   81   2          Timer4_Run(TIMx->TIM_Run);
   82   2          return  SUCCESS;    //ÊàêÂäü
   83   2        }
   84   1        return FAIL;  //ÈîôËØØ
   85   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       493     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
