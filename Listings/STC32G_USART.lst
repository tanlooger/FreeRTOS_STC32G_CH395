C251 COMPILER V5.60.0,  STC32G_USART                                                       24/03/23  00:55:35  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE STC32G_USART
OBJECT MODULE PLACED IN .\Objects\STC32G_USART.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE Sources\Driver\src\STC32G_USART.c XSMALL FUNCTIONS(REENTRANT) OPTIMIZE
                    -(4,SPEED) BROWSE INCDIR(.\Sources\User;.\Sources\User\include;.\Sources\FreeRTOS\include;.\Sources\FreeRTOS\portable\STC
                    -32G12K128;.\Sources\Driver\inc;.\Sources\Task\inc;.\Sources\ch395) DEBUG PRINT(.\Listings\STC32G_USART.lst) TABS(2) OBJE
                    -CT(.\Objects\STC32G_USART.obj) 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCMCU.com --------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- QQ:  800003751 -------------------------------------------------*/
   10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
   11          /*---------------------------------------------------------------------*/
   12          
   13          #include "STC32G_UART.h"
   14          #include "STC32G_USART.h"
   15          
   16          //========================================================================
   17          //                               本地变量声明
   18          //========================================================================
   19          
   20          //========================================================================
   21          // 函数: void UsartLinSendByte(uint8_t USARTx, uint8_t dat)
   22          // 描述: 发送一个字节函数。
   23          // 参数: none.
   24          // 返回: none.
   25          // 版本: VER1.0
   26          // 日期: 2021-10-28
   27          // 备注: 
   28          //========================================================================
   29          void UsartLinSendByte(uint8_t USARTx, uint8_t dat)
   30          {
   31   1        if(USARTx == USART1)
   32   1        {
   33   2          COM1.B_TX_busy = 1;
   34   2          SBUF = dat;
   35   2          while(COM1.B_TX_busy);
   36   2        }
   37   1        else if(USARTx == USART2)
   38   1        {
   39   2          COM2.B_TX_busy = 1;
   40   2          S2BUF = dat;
   41   2          while(COM2.B_TX_busy);
   42   2        }
   43   1      }
   44          
   45          //========================================================================
   46          // 函数: void UsartLinSendData(uint8_t USARTx, uint8_t *pdat)
   47          // 描述: Lin发送数据函数。
   48          // 参数: *pdat: 设置数据缓冲区.
   49          // 返回: Lin ID.
   50          // 版本: VER1.0
   51          // 日期: 2021-10-28
   52          // 备注: 
   53          //========================================================================
   54          void UsartLinSendData(uint8_t USARTx, uint8_t *pdat)
   55          {
   56   1        uint8_t i;
C251 COMPILER V5.60.0,  STC32G_USART                                                       24/03/23  00:55:35  PAGE 2   

   57   1      
   58   1        for(i=0;i<FRAME_LEN;i++)
   59   1        {
   60   2          UsartLinSendByte(USARTx,pdat[i]);
   61   2        }
   62   1      }
   63          
   64          //========================================================================
   65          // 函数: void UsartLinSendChecksum(uint8_t USARTx, uint8_t *dat)
   66          // 描述: 计算校验码并发送。
   67          // 参数: 数据场传输的数据.
   68          // 返回: none.
   69          // 版本: VER1.0
   70          // 日期: 2020-12-2
   71          // 备注: 
   72          //========================================================================
   73          void UsartLinSendChecksum(uint8_t USARTx, uint8_t *dat)
   74          {
   75   1        uint16_t sum = 0;
   76   1        uint8_t i;
   77   1      
   78   1        for(i = 0; i < FRAME_LEN; i++)
   79   1        {
   80   2          sum += dat[i];
   81   2          if(sum & 0xFF00)
   82   2          {
   83   3            sum = (sum & 0x00FF) + 1;
   84   3          }
   85   2        }
   86   1        sum ^= 0x00FF;
   87   1        UsartLinSendByte(USARTx,(uint8_t)sum);
   88   1      }
   89          
   90          //========================================================================
   91          // 函数: void UsartSendBreak(void)
   92          // 描述: 主模式发送Lin总线Break函数。
   93          // 参数: none.
   94          // 返回: none.
   95          // 版本: VER1.0
   96          // 日期: 2021-10-28
   97          // 备注: 
   98          //========================================================================
   99          void UsartSendBreak(uint8_t USARTx)
  100          {
  101   1        if(USARTx == USART1)
  102   1        {
  103   2          USARTCR5 |= 0x04;   //主模式 Send Break
  104   2        }
  105   1        else if(USARTx == USART2)
  106   1        {
  107   2          USART2CR5 |= 0x04;    //主模式 Send Break
  108   2        }
  109   1        UsartLinSendByte(USARTx,0x00);
  110   1      }
  111          
  112          //========================================================================
  113          // 函数: void UsartLinSendPID(uint8_t id)
  114          // 描述: ID码加上校验符，转成PID码并发送。
  115          // 参数: ID码.
  116          // 返回: none.
  117          // 版本: VER1.0
  118          // 日期: 2020-12-2
  119          // 备注: 
  120          //========================================================================
  121          void UsartLinSendPID(uint8_t USARTx, uint8_t id)
  122          {
C251 COMPILER V5.60.0,  STC32G_USART                                                       24/03/23  00:55:35  PAGE 3   

  123   1        uint8_t P0 ;
  124   1        uint8_t P1 ;
  125   1        
  126   1        P0 = (((id)^(id>>1)^(id>>2)^(id>>4))&0x01)<<6 ;
  127   1        P1 = ((~((id>>1)^(id>>3)^(id>>4)^(id>>5)))&0x01)<<7 ;
  128   1        
  129   1        UsartLinSendByte(USARTx,id|P0|P1);
  130   1      }
  131          
  132          //========================================================================
  133          // 函数: void UsartLinSendHeader(uint8_t lid)
  134          // 描述: Lin主机发送帧头函数。
  135          // 参数: ID码.
  136          // 返回: none.
  137          // 版本: VER1.0
  138          // 日期: 2021-10-28
  139          // 备注: 
  140          //========================================================================
  141          void UsartLinSendHeader(uint8_t USARTx, uint8_t lid)
  142          {
  143   1        UsartSendBreak(USARTx);           //Send Break
  144   1        UsartLinSendByte(USARTx,0x55);    //Send Sync Field
  145   1        UsartLinSendPID(USARTx,lid);      //设置总线ID
  146   1      }
  147          
  148          //========================================================================
  149          // 函数: void UsartLinSendFrame(uint8_t USARTx, uint8_t lid, uint8_t *pdat)
  150          // 描述: Lin主机发送完整帧函数。
  151          // 参数: lid: Lin ID; *pdat: 发送数据缓冲区.
  152          // 返回: none.
  153          // 版本: VER1.0
  154          // 日期: 2021-10-28
  155          // 备注: 
  156          //========================================================================
  157          void UsartLinSendFrame(uint8_t USARTx, uint8_t lid, uint8_t *pdat)
  158          {
  159   1        UsartSendBreak(USARTx);           //Send Break
  160   1        UsartLinSendByte(USARTx,0x55);    //Send Sync Field
  161   1      
  162   1        UsartLinSendPID(USARTx,lid);      //设置总线ID
  163   1        UsartLinSendData(USARTx,pdat);
  164   1        UsartLinSendChecksum(USARTx,pdat);
  165   1      }
  166          
  167          //========================================================================
  168          // 函数: void UsartLinBaudrate(uint8_t USARTx, uint16_t brt)
  169          // 描述: Lin总线波特率设置函数。
  170          // 参数: brt: 波特率.
  171          // 返回: none.
  172          // 版本: VER1.0
  173          // 日期: 2021-10-28
  174          // 备注: 
  175          //========================================================================
  176          void UsartLinBaudrate(uint8_t USARTx, uint16_t brt)
  177          {
  178   1        uint16_t tmp;
  179   1        
  180   1        tmp = (MAIN_Fosc >> 4) / brt;
  181   1        if(USARTx == USART1)
  182   1        {
  183   2          USARTBRH = (uint8_t)(tmp>>8);
  184   2          USARTBRL = (uint8_t)tmp;
  185   2        }
  186   1        else if(USARTx == USART2)
  187   1        {
  188   2          USART2BRH = (uint8_t)(tmp>>8);
C251 COMPILER V5.60.0,  STC32G_USART                                                       24/03/23  00:55:35  PAGE 4   

  189   2          USART2BRL = (uint8_t)tmp;
  190   2        }
  191   1      }
  192          
  193          //========================================================================
  194          // 函数: UASRT_LIN_Configuration
  195          // 描述: USART初始化程序.
  196          // 参数: USARTx: UART组号, USART结构参数,请参考USART.h里的定义.
  197          // 返回: none.
  198          // 版本: V1.0, 2022-03-30
  199          //========================================================================
  200          uint8_t UASRT_LIN_Configuration(uint8_t USARTx, USARTx_LIN_InitDefine *USART)
  201          {
  202   1        if(USARTx == USART1)
  203   1        {
  204   2          SCON = (SCON & 0x3f) | 0x40;    //USART1模式, 0x00: 同步移位输出, 0x40: 8位数据,可变波特
             -率, 0x80: 9位数据,固定波特率, 0xc0: 9位数据,可变波特率
  205   2          SMOD = 1;
  206   2          TI = 0;
  207   2          REN = 1;    //允许接收
  208   2          ES  = 1;    //允许中断
  209   2      
  210   2          if(USART->LIN_Enable == ENABLE) USARTCR1 |= 0x80;   //使能LIN模块
  211   2          else                USARTCR1 &= ~0x80;    //关闭LIN模块
  212   2          if(USART->LIN_Mode == LinSlaveMode) USARTCR5 |= 0x20;   //LIN模块从机模式
  213   2          else                USARTCR5 &= ~0x20;    //LIN模块主机模式
  214   2          if(USART->LIN_AutoSync == ENABLE) USARTCR5 |= 0x10;   //使能自动同步
  215   2          else                USARTCR5 &= ~0x10;    //关闭自动同步
  216   2      
  217   2          UsartLinBaudrate(USART1,USART->LIN_Baudrate);     //设置波特率
  218   2      
  219   2          return SUCCESS;
  220   2        }
  221   1      
  222   1        if(USARTx == USART2)
  223   1        {
  224   2          S2CON = (S2CON & 0x3f) | 0x50;
  225   2          T2x12 = 1;   //定时器2时钟1T模式
  226   2          T2R = 1;     //开始计时
  227   2          ES2 = 1;     //允许中断
  228   2          S2CFG |= 0x80;        //S2MOD = 1
  229   2      
  230   2          if(USART->LIN_Enable == ENABLE) USART2CR1 |= 0x80;    //使能LIN模块
  231   2          else                USART2CR1 &= ~0x80;   //关闭LIN模块
  232   2          if(USART->LIN_Mode == LinSlaveMode) USART2CR5 |= 0x20;    //LIN模块从机模式
  233   2          else                USART2CR5 &= ~0x20;   //LIN模块主机模式
  234   2          if(USART->LIN_AutoSync == ENABLE) USART2CR5 |= 0x10;    //使能自动同步
  235   2          else                USART2CR5 &= ~0x10;   //关闭自动同步
  236   2      
  237   2          UsartLinBaudrate(USART2,USART->LIN_Baudrate);     //设置波特率
  238   2      
  239   2          return SUCCESS;
  240   2        }
  241   1        return FAIL;  //错误
  242   1      }
  243          
  244          /*********************************************************/


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       843     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
C251 COMPILER V5.60.0,  STC32G_USART                                                       24/03/23  00:55:35  PAGE 5   

  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
