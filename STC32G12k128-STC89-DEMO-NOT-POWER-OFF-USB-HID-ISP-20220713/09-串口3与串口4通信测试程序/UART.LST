C251 COMPILER V5.60.0,  UART                                                               09/07/22  13:59:49  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN UART.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE UART.c XSMALL INTR2 BROWSE DEBUG

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCMCU.com --------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- QQ:  800003751 -------------------------------------------------*/
   10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
   11          /*---------------------------------------------------------------------*/
   12          
   13          
   14          /*************  功能说明    **************
   15          
   16          本例程基于STC32G转STC89系列转接板（降龙棍）进行编写测试。.
   17          
   18          P5.0(RXD3)口串100欧电阻到P5.3(TXD4)口进行测试.
   19          
   20          串口4定时发送一个字节累加数据给串口3.
   21          
   22          串口3将接收到的数据从P0口的LED灯显示出来.
   23          
   24          此外程序演示两种复位进入USB下载模式的方法：
   25          1. 通过每1毫秒执行一次“KeyResetScan”函数，实现长按P3.2口按键触发MCU复位，进入USB下载模式。
   26          2. 通过加载“stc_usb_hid_32g.lib”库函数，实现使用STC-ISP软件发送指令触发MCU复位，进入USB下载模式并自动下
             -载。
   27          
   28          下载时, 选择时钟 22.1184MHZ (用户可自行修改频率).
   29          
   30          ******************************************/
   31          
   32          #include "../comm/STC32G.h"  //包含此头文件后，不需要再包含"reg51.h"头文件
   33          #include "../comm/usb.h"     //USB调试及复位所需头文件
   34          
   35          /****************************** 用户定义宏 ***********************************/
   36          
   37          #define MAIN_Fosc       22118400L   //定义主时钟
   38          #define Timer0_Reload   (65536UL -(MAIN_Fosc / 1000))       //Timer 0 中断频率, 1000次/秒
   39          
   40          #define Baudrate3   115200UL
   41          #define Baudrate4   115200UL
   42          
   43          #define UART3_BUF_LENGTH    64
   44          #define UART4_BUF_LENGTH    64
   45          
   46          /*****************************************************************************/
   47          
   48          /*************  本地变量声明    **************/
   49          bit B_1ms;      //1ms标志
   50          u16 Sec_Cnt;    //1秒计数
   51          u8  TX_Data;    //发送数据
   52          
   53          u8  TX3_Cnt;    //发送计数
   54          u8  RX3_Cnt;    //接收计数
   55          u8  TX4_Cnt;    //发送计数
   56          u8  RX4_Cnt;    //接收计数
   57          bit B_TX3_Busy; //发送忙标志
   58          bit B_TX4_Busy; //发送忙标志
C251 COMPILER V5.60.0,  UART                                                               09/07/22  13:59:49  PAGE 2   

   59          u8 RX3_TimeOut;
   60          u8 RX4_TimeOut;
   61          
   62          u8  RX3_Buffer[UART3_BUF_LENGTH]; //接收缓冲
   63          u8  RX4_Buffer[UART4_BUF_LENGTH]; //接收缓冲
   64          
   65          //USB调试及复位所需定义
   66          char *USER_DEVICEDESC = NULL;
   67          char *USER_PRODUCTDESC = NULL;
   68          char *USER_STCISPCMD = "@STCISP#";                      //设置自动复位到ISP区的用户接口命令
   69          
   70          //P3.2口按键复位所需变量
   71          bit Key_Flag;
   72          u16 Key_cnt;
   73          
   74          void UART3_config(u8 brt);   // 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer3做波特率.
   75          void UART4_config(u8 brt);   // 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer4做波特率.
   76          void UART3_TxByte(u8 dat);
   77          void UART4_TxByte(u8 dat);
   78          void PrintString3(u8 *puts);
   79          void PrintString4(u8 *puts);
   80          void KeyResetScan(void);
   81          /******************** 主函数 **************************/
   82          void main(void)
   83          {
   84   1      //    u8 i;
   85   1              
   86   1          WTST = 0;  //设置程序指令延时参数，赋值为0可将CPU执行指令的速度设置为最快
   87   1          EAXFR = 1; //扩展寄存器(XFR)访问使能
   88   1          CKCON = 0; //提高访问XRAM速度
   89   1      
   90   1          P0M1 = 0x00;   P0M0 = 0x00;   //设置为准双向口
   91   1          P1M1 = 0x00;   P1M0 = 0x00;   //设置为准双向口
   92   1          P2M1 = 0x00;   P2M0 = 0x00;   //设置为准双向口
   93   1          P3M1 = 0x00;   P3M0 = 0x00;   //设置为准双向口
   94   1          P4M1 = 0x00;   P4M0 = 0x00;   //设置为准双向口
   95   1          P5M1 = 0x00;   P5M0 = 0x00;   //设置为准双向口
   96   1          P6M1 = 0x00;   P6M0 = 0x00;   //设置为准双向口
   97   1          P7M1 = 0x00;   P7M0 = 0x00;   //设置为准双向口
   98   1      
   99   1          //USB调试及复位所需代码-----
  100   1          P3M0 &= ~0x03;
  101   1          P3M1 |= 0x03;
  102   1          IRC48MCR = 0x80;
  103   1          while (!(IRC48MCR & 0x01));
  104   1          usb_init();
  105   1          //-------------------------
  106   1      
  107   1          //Timer0初始化
  108   1          AUXR = 0x80;    //Timer0 set as 1T, 16 bits timer auto-reload, 
  109   1          TH0 = (u8)(Timer0_Reload / 256);
  110   1          TL0 = (u8)(Timer0_Reload % 256);
  111   1          ET0 = 1;    //Timer0 interrupt enable
  112   1          TR0 = 1;    //Tiner0 run
  113   1      
  114   1          UART3_config(3);    // 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer3做波特率.
  115   1          UART4_config(4);    // 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer4做波特率.
  116   1          EUSB = 1;   //IE2相关的中断使能后，需要重新设置EUSB
  117   1          EA = 1;     //打开总中断
  118   1      
  119   1      //    PrintString3("STC32G UART3-UART4 Test Programme!\r\n");  //UART3发送一个字符串
  120   1      //    PrintString4("STC32G UART4-UART3 Test Programme!\r\n");  //UART4发送一个字符串
  121   1      
  122   1          while (1)
  123   1          {
  124   2              if (bUsbOutReady) //USB调试及复位所需代码
C251 COMPILER V5.60.0,  UART                                                               09/07/22  13:59:49  PAGE 3   

  125   2              {
  126   3      //            memcpy(UsbInBuffer, UsbOutBuffer, 64);      //原路返回, 用于测试HID
  127   3      //            usb_IN();
  128   3                  
  129   3                  usb_OUT_done();
  130   3              }
  131   2      
  132   2              if(B_1ms)
  133   2              {
  134   3                  B_1ms = 0;
  135   3                  KeyResetScan();   //P3.2口按键触发软件复位，进入USB下载模式，不需要此功能可删除本行代码
  136   3      
  137   3                  Sec_Cnt++;
  138   3                  if(Sec_Cnt>=200)
  139   3                  {
  140   4                      Sec_Cnt = 0;
  141   4                      UART4_TxByte(TX_Data++);  //发送计数值给串口3
  142   4                  }
  143   3      
  144   3                  if(RX3_TimeOut > 0)     //超时计数
  145   3                  {
  146   4                      if(--RX3_TimeOut == 0)
  147   4                      {
  148   5                          P0 = ~RX3_Buffer[0];  //串口3把收到的数据发到P0口，通过P0口的LED显示
  149   5                          RX3_Cnt  = 0;   //清除字节数
  150   5                      }
  151   4                  }
  152   3      
  153   3      //            if(RX4_TimeOut > 0)     //超时计数
  154   3      //            {
  155   3      //                if(--RX4_TimeOut == 0)
  156   3      //                {
  157   3      //                    for(i=0; i<RX4_Cnt; i++)    UART4_TxByte(RX4_Buffer[i]);    //把收到的数据通过串口4
             -输出
  158   3      //                    RX4_Cnt  = 0;   //清除字节数
  159   3      //                }
  160   3      //            }
  161   3              }
  162   2          }
  163   1      }
  164          
  165          
  166          /********************** Timer0 1ms中断函数 ************************/
  167          void timer0(void) interrupt 1
  168          {
  169   1              B_1ms = 1;
  170   1      }
  171          
  172          //========================================================================
  173          // 函数: void UART3_TxByte(u8 dat)
  174          // 描述: 发送一个字节.
  175          // 参数: 无.
  176          // 返回: 无.
  177          // 版本: V1.0, 2014-6-30
  178          //========================================================================
  179          //void UART3_TxByte(u8 dat)
  180          //{
  181          //    B_TX3_Busy = 1;
  182          //    S3BUF = dat;
  183          //    while(B_TX3_Busy);
  184          //}
  185          
  186          //========================================================================
  187          // 函数: void UART4_TxByte(u8 dat)
  188          // 描述: 发送一个字节.
  189          // 参数: 无.
C251 COMPILER V5.60.0,  UART                                                               09/07/22  13:59:49  PAGE 4   

  190          // 返回: 无.
  191          // 版本: V1.0, 2014-6-30
  192          //========================================================================
  193          void UART4_TxByte(u8 dat)
  194          {
  195   1          B_TX4_Busy = 1;
  196   1          S4BUF = dat;
  197   1          while(B_TX4_Busy);
  198   1      }
  199          
  200          //========================================================================
  201          // 函数: void PrintString3(u8 *puts)
  202          // 描述: 串口3发送字符串函数。
  203          // 参数: puts:  字符串指针.
  204          // 返回: none.
  205          // 版本: VER1.0
  206          // 日期: 2014-11-28
  207          // 备注: 
  208          //========================================================================
  209          //void PrintString3(u8 *puts)
  210          //{
  211          //    for (; *puts != 0;  puts++)     //遇到停止符0结束
  212          //    {
  213          //        UART3_TxByte(*puts);
  214          //    }
  215          //}
  216          
  217          //========================================================================
  218          // 函数: void PrintString4(u8 *puts)
  219          // 描述: 串口4发送字符串函数。
  220          // 参数: puts:  字符串指针.
  221          // 返回: none.
  222          // 版本: VER1.0
  223          // 日期: 2014-11-28
  224          // 备注: 
  225          //========================================================================
  226          //void PrintString4(u8 *puts)
  227          //{
  228          //    for (; *puts != 0;  puts++)     //遇到停止符0结束
  229          //    {
  230          //        UART4_TxByte(*puts);
  231          //    }
  232          //}
  233          
  234          //========================================================================
  235          // 函数: SetTimer2Baudraye(u16 dat)
  236          // 描述: 设置Timer2做波特率发生器。
  237          // 参数: dat: Timer2的重装值.
  238          // 返回: none.
  239          // 版本: VER1.0
  240          // 日期: 2014-11-28
  241          // 备注: 
  242          //========================================================================
  243          void SetTimer2Baudraye(u16 dat)
  244          {
  245   1          T2R = 0;            //Timer stop
  246   1          T2_CT = 0;  //Timer2 set As Timer
  247   1          T2x12 = 1;  //Timer2 set as 1T mode
  248   1          T2H = (u8)(dat / 256);
  249   1          T2L = (u8)(dat % 256);
  250   1          ET2 = 0;    //禁止中断
  251   1          T2R = 1;            //Timer run enable
  252   1      }
  253          
  254          //========================================================================
  255          // 函数: void UART3_config(u8 brt)
C251 COMPILER V5.60.0,  UART                                                               09/07/22  13:59:49  PAGE 5   

  256          // 描述: UART3初始化函数。
  257          // 参数: brt: 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer3做波特率.
  258          // 返回: none.
  259          // 版本: VER1.0
  260          // 日期: 2014-11-28
  261          // 备注: 
  262          //========================================================================
  263          void UART3_config(u8 brt)    // 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer3做波特率.
  264          {
  265   1          if(brt == 2)
  266   1          {
  267   2              SetTimer2Baudraye((u8)(65536UL - (MAIN_Fosc / 4) / Baudrate3));
  268   2              S3CON = 0x10;       //8位数据, 使用Timer2做波特率发生器, 允许接收
  269   2          }
  270   1          else
  271   1          {
  272   2              T3R = 0;          //Timer stop
  273   2              S3CON = 0x50;     //8位数据, 使用Timer3做波特率发生器, 允许接收
  274   2              T3H = (65536UL - (MAIN_Fosc / 4) / Baudrate3) / 256;
  275   2              T3L = (65536UL - (MAIN_Fosc / 4) / Baudrate3) % 256;
  276   2              T3_CT = 0;      //Timer3 set As Timer
  277   2              T3x12 = 1;      //Timer3 set as 1T mode
  278   2              T3R = 1;                //Timer run enable
  279   2          }
  280   1          ES3  = 1;       //允许UART3中断
  281   1          S3_S = 1;       //UART3 switch bit1 to: 0: P0.0 P0.1,  1: P5.0 P5.1
  282   1      
  283   1          B_TX3_Busy = 0;
  284   1          TX3_Cnt = 0;
  285   1          RX3_Cnt = 0;
  286   1      }
  287          
  288          //========================================================================
  289          // 函数: void UART4_config(u8 brt)
  290          // 描述: UART4初始化函数。
  291          // 参数: brt: 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer4做波特率.
  292          // 返回: none.
  293          // 版本: VER1.0
  294          // 日期: 2014-11-28
  295          // 备注: 
  296          //========================================================================
  297          void UART4_config(u8 brt)    // 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer4做波特率.
  298          {
  299   1          if(brt == 2)
  300   1          {
  301   2              SetTimer2Baudraye((u8)(65536UL - (MAIN_Fosc / 4) / Baudrate4));
  302   2              S4CON = 0x10;       //8位数据, 使用Timer2做波特率发生器, 允许接收
  303   2          }
  304   1          else
  305   1          {
  306   2              T4R = 0;        //Timer stop
  307   2              S4CON = 0x50;       //8位数据, 使用Timer4做波特率发生器, 允许接收
  308   2              T4H = (65536UL - (MAIN_Fosc / 4) / Baudrate4) / 256;
  309   2              T4L = (65536UL - (MAIN_Fosc / 4) / Baudrate4) % 256;
  310   2              T4_CT = 0;      //Timer3 set As Timer
  311   2              T4x12 = 1;      //Timer3 set as 1T mode
  312   2              T4R = 1;        //Timer run enable
  313   2          }
  314   1          ES4  = 1;       //允许UART4中断
  315   1          S4_S = 1;       //UART4 switch bit2 to: 0: P0.2 P0.3, 1: P5.2 P5.3
  316   1      
  317   1          B_TX4_Busy = 0;
  318   1          TX4_Cnt = 0;
  319   1          RX4_Cnt = 0;
  320   1      }
  321          
C251 COMPILER V5.60.0,  UART                                                               09/07/22  13:59:49  PAGE 6   

  322          //========================================================================
  323          // 函数: void UART3_int (void) interrupt UART3_VECTOR
  324          // 描述: UART3中断函数。
  325          // 参数: nine.
  326          // 返回: none.
  327          // 版本: VER1.0
  328          // 日期: 2014-11-28
  329          // 备注: 
  330          //========================================================================
  331          void UART3_int (void) interrupt 17
  332          {
  333   1          if(S3RI)
  334   1          {
  335   2              S3RI = 0;    //Clear Rx flag
  336   2              RX3_Buffer[RX3_Cnt] = S3BUF;
  337   2              if(++RX3_Cnt >= UART3_BUF_LENGTH)   RX3_Cnt = 0;
  338   2              RX3_TimeOut = 5;
  339   2          }
  340   1      
  341   1          if(S3TI)
  342   1          {
  343   2              S3TI = 0;   //Clear Tx flag
  344   2              B_TX3_Busy = 0;
  345   2          }
  346   1      }
  347          
  348          //========================================================================
  349          // 函数: void UART4_int (void) interrupt UART4_VECTOR
  350          // 描述: UART4中断函数。
  351          // 参数: nine.
  352          // 返回: none.
  353          // 版本: VER1.0
  354          // 日期: 2014-11-28
  355          // 备注: 
  356          //========================================================================
  357          void UART4_int (void) interrupt 18
  358          {
  359   1          if(S4RI)
  360   1          {
  361   2              S4RI = 0;    //Clear Rx flag
  362   2              if(RX4_Cnt >= UART4_BUF_LENGTH)   RX4_Cnt = 0;
  363   2              RX4_Buffer[RX4_Cnt] = S4BUF;
  364   2              RX4_Cnt++;
  365   2              RX4_TimeOut = 5;
  366   2          }
  367   1      
  368   1          if(S4TI)
  369   1          {
  370   2              S4TI = 0;    //Clear Tx flag
  371   2              B_TX4_Busy = 0;
  372   2          }
  373   1      }
  374          
  375          //========================================================================
  376          // 函数: void delay_ms(u8 ms)
  377          // 描述: 延时函数。
  378          // 参数: ms,要延时的ms数, 这里只支持1~255ms. 自动适应主时钟.
  379          // 返回: none.
  380          // 版本: VER1.0
  381          // 日期: 2022-6-3
  382          // 备注: 
  383          //========================================================================
  384          void delay_ms(u8 ms)
  385          {
  386   1          u16 i;
  387   1          do{
C251 COMPILER V5.60.0,  UART                                                               09/07/22  13:59:49  PAGE 7   

  388   2              i = MAIN_Fosc / 6000;
  389   2              while(--i);   //6T per loop
  390   2          }while(--ms);
  391   1      }
  392          
  393          //========================================================================
  394          // 函数: void KeyResetScan(void)
  395          // 描述: P3.2口按键长按1秒触发软件复位，进入USB下载模式。
  396          // 参数: none.
  397          // 返回: none.
  398          // 版本: VER1.0
  399          // 日期: 2022-6-11
  400          // 备注: 
  401          //========================================================================
  402          void KeyResetScan(void)
  403          {
  404   1          if(!P32)
  405   1          {
  406   2              if(!Key_Flag)
  407   2              {
  408   3                  Key_cnt++;
  409   3                  if(Key_cnt >= 1000)         //连续1000ms有效按键检测
  410   3                  {
  411   4                      Key_Flag = 1;           //设置按键状态，防止重复触发
  412   4      
  413   4                      USBCON = 0x00;      //清除USB设置
  414   4                      USBCLK = 0x00;
  415   4                      IRC48MCR = 0x00;
  416   4                      
  417   4                      delay_ms(10);
  418   4                      IAP_CONTR = 0x60;   //触发软件复位，从ISP开始执行
  419   4                      while (1);
  420   4                  }
  421   3              }
  422   2          }
  423   1          else
  424   1          {
  425   2              Key_cnt = 0;
  426   2              Key_Flag = 0;
  427   2          }
  428   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       572     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       151     ------
  bit size             =         4     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        33     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
