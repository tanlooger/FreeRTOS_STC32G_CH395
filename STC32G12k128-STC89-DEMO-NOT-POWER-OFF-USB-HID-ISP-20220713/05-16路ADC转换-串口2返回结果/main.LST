C251 COMPILER V5.60.0,  main                                                               09/07/22  13:57:44  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE main.c XSMALL INTR2 BROWSE DEBUG

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCMCU.com --------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- QQ:  800003751 -------------------------------------------------*/
   10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
   11          /*---------------------------------------------------------------------*/
   12          
   13          /*************  功能说明        **************
   14          
   15          本例程基于STC32G转STC89系列转接板（降龙棍）进行编写测试。
   16          
   17          演示15路ADC和bandgap查询采样，串口2(P4.6 P4.7)发送给上位机，波特率115200,N,8,1.
   18          
   19          0~7通道对应P1.0~P1.7, 8~14通道对应P0.0~P0.6, 15通道为内部1.19V基准电压做输入的ADC值.
   20          
   21          初始化时先把要ADC转换的引脚设置为高阻输入.
   22          
   23          此外程序演示两种复位进入USB下载模式的方法：
   24          1. 通过每1毫秒执行一次“KeyResetScan”函数，实现长按P3.2口按键触发MCU复位，进入USB下载模式。
   25          2. 通过加载“stc_usb_hid_32g.lib”库函数，实现使用STC-ISP软件发送指令触发MCU复位，进入USB下载模式并自动下
             -载。
   26          
   27          下载时, 选择时钟 22.1184MHz (用户可自行修改频率).
   28          
   29          ******************************************/
   30          
   31          #include "../comm/STC32G.h"  //包含此头文件后，不需要再包含"reg51.h"头文件
   32          #include "../comm/usb.h"     //USB调试及复位所需头文件
   33          #include "intrins.h"
   34          #include "stdio.h"
   35          
   36          #define MAIN_Fosc     22118400L  //定义主时钟
   37          #define Baudrate      115200L
   38          #define TM            (65536 -(MAIN_Fosc/Baudrate/4))
   39          
   40          #define Timer0_Reload (65536UL -(MAIN_Fosc / 1000))       //Timer 0 中断频率, 1000次/秒
   41          
   42          /*************  本地常量声明    **************/
   43          
   44          #define ADC_SPEED       15              /* 0~15, ADC转换时间(CPU时钟数) = (n+1)*32  ADCCFG */
   45          #define RES_FMT         (1<<5)  /* ADC结果格式 0: 左对齐, ADC_RES: D11 D10 D9 D8 D7 D6 D5 D4, ADC_RESL: D3 D2 D1 
             -D0 0 0 0 0 */
   46                                                                  /* ADCCFG      1: 右对齐, ADC_RES: 0 0 0 0 D11 D10 D9 D8, ADC_RESL: D7 D6 D5 D4 D3 D2 D1 D0 */
   47          
   48          /*************  本地变量声明    **************/
   49          
   50          //USB调试及复位所需定义
   51          char *USER_DEVICEDESC = NULL;
   52          char *USER_PRODUCTDESC = NULL;
   53          char *USER_STCISPCMD = "@STCISP#";                      //设置自动复位到ISP区的用户接口命令
   54          
   55          //P3.2口按键复位所需变量
   56          bit Key_Flag;
   57          u16 Key_cnt;
C251 COMPILER V5.60.0,  main                                                               09/07/22  13:57:44  PAGE 2   

   58          
   59          /*************  本地函数声明    **************/
   60          
   61          void Timer0_Init(void);
   62          void delay_ms(u8 ms);
   63          void ADC_convert(u8 chn);       //chn=0~7对应P1.0~P1.7, chn=8~14对应P0.0~P0.6, chn=15对应BandGap电压
   64          u16     Get_ADC12bitResult(u8 channel);
   65          
   66          /******************** 串口打印函数 ********************/
   67          void UartInit(void)
   68          {
   69   1              S2_S = 1;       //UART2 switch to: 0: P1.0 P1.1,  1: P4.6 P4.7
   70   1              S2CON = (S2CON & 0x3f) | 0x40; 
   71   1              T2L  = TM;
   72   1              T2H  = TM>>8;
   73   1              AUXR |= 0x14;   //定时器2时钟1T模式,开始计时
   74   1      }
   75          
   76          void UartPutc(unsigned char dat)
   77          {
   78   1              S2BUF  = dat; 
   79   1              while(S2TI == 0);
   80   1              S2TI = 0;    //Clear Tx flag
   81   1      }
   82          
   83          char putchar(char c)
   84          {
   85   1              UartPutc(c);
   86   1              return c;
   87   1      }
   88          
   89          /**********************************************/
   90          void main(void)
   91          {
   92   1              u8      i;
   93   1      
   94   1          WTST = 0;  //设置程序指令延时参数，赋值为0可将CPU执行指令的速度设置为最快
   95   1          EAXFR = 1; //扩展寄存器(XFR)访问使能
   96   1          CKCON = 0; //提高访问XRAM速度
   97   1      
   98   1              P0M1 = 0x7f;   P0M0 = 0x00;   //设置为高阻输入
   99   1              P1M1 = 0xfb;   P1M0 = 0x00;   //设置为高阻输入
  100   1              P2M1 = 0x00;   P2M0 = 0x00;   //设置为准双向口
  101   1              P3M1 = 0x00;   P3M0 = 0x00;   //设置为准双向口
  102   1              P4M1 = 0x00;   P4M0 = 0x00;   //设置为准双向口
  103   1              P5M1 = 0x10;   P5M0 = 0x00;   //设置P5.4为高阻输入
  104   1              P6M1 = 0x00;   P6M0 = 0x00;   //设置为准双向口
  105   1              P7M1 = 0x00;   P7M0 = 0x00;   //设置为准双向口
  106   1              
  107   1          //USB调试及复位所需代码-----
  108   1          P3M0 &= ~0x03;
  109   1          P3M1 |= 0x03;
  110   1          IRC48MCR = 0x80;
  111   1          while (!(IRC48MCR & 0x01));
  112   1          usb_init();
  113   1          //-------------------------
  114   1          Timer0_Init();
  115   1      
  116   1              ADCTIM = 0x3f;  //设置通道选择时间、保持时间、采样时间
  117   1              ADCCFG = RES_FMT + ADC_SPEED;
  118   1              //ADC模块电源打开后，需等待1ms，MCU内部ADC电源稳定后再进行AD转换
  119   1              ADC_CONTR = 0x80 + 0;   //ADC on + channel
  120   1      
  121   1              UartInit();
  122   1          EUSB = 1;   //IE2相关的中断位操作使能后，需要重新设置EUSB
  123   1              EA = 1;
C251 COMPILER V5.60.0,  main                                                               09/07/22  13:57:44  PAGE 3   

  124   1              printf("STC32G系列ADC测试程序!\r\n");
  125   1      
  126   1              while (1)
  127   1              {
  128   2                      for(i=0; i<16; i++)
  129   2                      {
  130   3                              delay_ms(200);
  131   3                              //ADC_convert(3);               //发送固定通道AD值
  132   3      
  133   3                              ADC_convert(i);         //发送轮询通道AD值
  134   3                              if((i & 7) == 7)        //分两行打印
  135   3                              {
  136   4                                      printf("\r\n");
  137   4                              }
  138   3                      }
  139   2              }
  140   1      }
  141          
  142          
  143          //========================================================================
  144          // 函数: u16 Get_ADC12bitResult(u8 channel))    //channel = 0~15
  145          // 描述: 查询法读一次ADC结果.
  146          // 参数: channel: 选择要转换的ADC, 0~15.
  147          // 返回: 12位ADC结果.
  148          // 版本: V1.0, 2016-4-28
  149          //========================================================================
  150          u16     Get_ADC12bitResult(u8 channel)  //channel = 0~15
  151          {
  152   1              ADC_RES = 0;
  153   1              ADC_RESL = 0;
  154   1      
  155   1          ADC_CONTR = (ADC_CONTR & 0xf0) | channel; //设置ADC转换通道
  156   1          ADC_START = 1;//启动ADC转换
  157   1          _nop_();
  158   1          _nop_();
  159   1          _nop_();
  160   1          while(ADC_FLAG == 0);   //wait for ADC finish
  161   1          ADC_FLAG = 0;     //清除ADC结束标志
  162   1          return (((u16)ADC_RES << 8) | ADC_RESL);
  163   1      }
  164          
  165          #define SUM_LENGTH      16      /* 平均值采样次数 最大值16 */
  166          
  167          /***********************************
  168          查询方式做一次ADC, chn为通道号, chn=0~7对应P1.0~P1.7, chn=8~14对应P0.0~P0.6, chn=15对应BandGap电压.
  169          ***********************************/
  170          void ADC_convert(u8 chn)
  171          {
  172   1              u16     j;
  173   1              u8      k;              //平均值滤波时使用
  174   1      
  175   1              Get_ADC12bitResult(chn);                //参数i=0~15,查询方式做一次ADC, 切换通道后第一次转换结果丢弃. 避免采样电容的残
             -存电压影响.
  176   1              Get_ADC12bitResult(chn);                //参数i=0~15,查询方式做一次ADC, 切换通道后第二次转换结果丢弃. 避免采样电容的残
             -存电压影响.
  177   1              for(k=0, j=0; k<SUM_LENGTH; k++)        j += Get_ADC12bitResult(chn);   // 采样累加和, 参数0~15,查询方式做一次ADC
             -, 返回值就是结果
  178   1              j = j / SUM_LENGTH;             // 求平均
  179   1      
  180   1              if(chn == 15)   printf("Bandgap=%04u  ",j);     //内基准 1.19V
  181   1              else            //ADC0~ADC14
  182   1              {
  183   2                      printf("ADC%02d=%04u  ",chn,j);
  184   2              }
  185   1      }
  186          
C251 COMPILER V5.60.0,  main                                                               09/07/22  13:57:44  PAGE 4   

  187          //========================================================================
  188          // 函数: void delay_ms(u8 ms)
  189          // 描述: 延时函数。
  190          // 参数: ms,要延时的ms数, 这里只支持1~255ms. 自动适应主时钟.
  191          // 返回: none.
  192          // 版本: VER1.0
  193          // 日期: 2013-4-1
  194          // 备注: 
  195          //========================================================================
  196          void delay_ms(u8 ms)
  197          {
  198   1              u16 i;
  199   1              do
  200   1              {
  201   2                      i = MAIN_Fosc / 6000;
  202   2                      while(--i);
  203   2              }while(--ms);
  204   1      }
  205          
  206          //========================================================================
  207          // 函数: void Timer0_Init(void)
  208          // 描述: 定时器0初始化函数。
  209          // 参数: none.
  210          // 返回: none.
  211          // 版本: VER1.0
  212          // 日期: 2022-6-2
  213          // 备注: 
  214          //========================================================================
  215          void Timer0_Init(void)
  216          {
  217   1          // Timer0初始化
  218   1          AUXR = 0x80;    //Timer0 set as 1T, 16 bits timer auto-reload, 
  219   1          TH0 = (u8)(Timer0_Reload / 256);
  220   1          TL0 = (u8)(Timer0_Reload % 256);
  221   1          ET0 = 1;    //Timer0 interrupt enable
  222   1          TR0 = 1;    //Tiner0 run
  223   1      }
  224          
  225          //========================================================================
  226          // 函数: void KeyResetScan(void)
  227          // 描述: P3.2口按键长按1秒触发软件复位，进入USB下载模式。
  228          // 参数: none.
  229          // 返回: none.
  230          // 版本: VER1.0
  231          // 日期: 2022-6-11
  232          // 备注: 
  233          //========================================================================
  234          void KeyResetScan(void)
  235          {
  236   1          if(!P32)
  237   1          {
  238   2              if(!Key_Flag)
  239   2              {
  240   3                  Key_cnt++;
  241   3                  if(Key_cnt >= 1000)         //连续1000ms有效按键检测
  242   3                  {
  243   4                      Key_Flag = 1;           //设置按键状态，防止重复触发
  244   4      
  245   4                      USBCON = 0x00;      //清除USB设置
  246   4                      USBCLK = 0x00;
  247   4                      IRC48MCR = 0x00;
  248   4                      
  249   4                      delay_ms(10);
  250   4                      IAP_CONTR = 0x60;   //触发软件复位，从ISP开始执行
  251   4                      while (1);
  252   4                  }
C251 COMPILER V5.60.0,  main                                                               09/07/22  13:57:44  PAGE 5   

  253   3              }
  254   2          }
  255   1          else
  256   1          {
  257   2              Key_cnt = 0;
  258   2              Key_Flag = 0;
  259   2          }
  260   1      }
  261          
  262          //========================================================================
  263          // 函数: void timer0_int(void)
  264          // 描述: Timer0 1ms中断函数。
  265          // 参数: none.
  266          // 返回: none.
  267          // 版本: VER1.0
  268          // 日期: 2022-6-11
  269          // 备注: 
  270          //========================================================================
  271          void timer0_int(void) interrupt 1
  272          {
  273   1          if (bUsbOutReady) //USB调试及复位所需代码
  274   1          {
  275   2      //        memcpy(UsbInBuffer, UsbOutBuffer, 64);      //原路返回, 用于测试HID
  276   2      //        usb_IN();
  277   2              
  278   2              usb_OUT_done();
  279   2          }
  280   1      
  281   1          KeyResetScan();   //P3.2口按键触发软件复位，进入USB下载模式，不需要此功能可删除本行代码
  282   1      }
  283          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       500     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        14     ------
  bit size             =         1     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        91     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
