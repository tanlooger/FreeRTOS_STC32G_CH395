C251 COMPILER V5.60.0,  interface                                                          09/07/22  09:47:17  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE interface
OBJECT MODULE PLACED IN .\obj\interface.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE src\interface.c XSMALL INTR2 BROWSE DEBUG PRINT(.\obj\interface.lst) O
                    -BJECT(.\obj\interface.obj) 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCMCU.com --------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- QQ:  800003751 -------------------------------------------------*/
   10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
   11          /*---------------------------------------------------------------------*/
   12          
   13          #include "stc.h"
   14          #include "uart.h"
   15          #include "interface.h"
   16          
   17          static void SEG7_SetHeader()
   18          {
   19   1          UartTxBuffer[0] = '7';
   20   1          UartTxBuffer[1] = 'S';
   21   1          UartTxBuffer[2] = 'E';
   22   1          UartTxBuffer[3] = 'G';
   23   1      }
   24          
   25          void SEG7_ShowLong(long n, char radix)
   26          {
   27   1          SEG7_SetHeader();
   28   1          UartTxBuffer[4] = 'L';
   29   1          UartTxBuffer[5] = 0x01;
   30   1          UartTxBuffer[6] = radix;
   31   1          UartTxBuffer[7] = 0x00;
   32   1          *(long *)&UartTxBuffer[8] = n;
   33   1      
   34   1          uart_SendBlock(12);
   35   1      }
   36          
   37          void SEG7_ShowFloat(float f)
   38          {
   39   1          SEG7_SetHeader();
   40   1          UartTxBuffer[4] = 'D';
   41   1          UartTxBuffer[5] = 0x01;
   42   1          UartTxBuffer[6] = 0x00;
   43   1          UartTxBuffer[7] = 0x00;
   44   1          *(float *)&UartTxBuffer[8] = f;
   45   1      
   46   1          uart_SendBlock(12);
   47   1      }
   48          
   49          void SEG7_ShowCode(BYTE *cod)
   50          {
   51   1          SEG7_SetHeader();
   52   1          UartTxBuffer[4] = 'C';
   53   1          UartTxBuffer[5] = 0x00;
   54   1          UartTxBuffer[6] = 0x00;
   55   1          UartTxBuffer[7] = 0x00;
   56   1          memcpy(&UartTxBuffer[8], cod, 8);
   57   1      
   58   1          uart_SendBlock(16);
C251 COMPILER V5.60.0,  interface                                                          09/07/22  09:47:17  PAGE 2   

   59   1      }
   60          
   61          int SEG7_ShowString (const char *fmt, ...)
   62          {
   63   1          va_list va;
   64   1          int ret;
   65   1      
   66   1          SEG7_SetHeader();
   67   1          UartTxBuffer[4] = 'S';
   68   1          UartTxBuffer[5] = 0x00;
   69   1          UartTxBuffer[6] = 0x00;
   70   1          UartTxBuffer[7] = 0x00;
   71   1      
   72   1          va_start(va, fmt);
   73   1          ret = vsprintf(&UartTxBuffer[8], fmt, va) + 8;
   74   1          va_end(va);
   75   1      
   76   1          uart_SendBlock((BYTE)(ret+1));
   77   1      
   78   1          return ret;
   79   1      }
   80          
   81          void LED40_SendData(BYTE *dat, BYTE size)
   82          {
   83   1          if (size > 59)
   84   1              size = 59;
   85   1      
   86   1          UartTxBuffer[0] = 'L';
   87   1          UartTxBuffer[1] = 'E';
   88   1          UartTxBuffer[2] = 'D';
   89   1          UartTxBuffer[3] = 40;
   90   1          UartTxBuffer[4] = size;
   91   1          memcpy(&UartTxBuffer[5], dat, size);
   92   1      
   93   1          uart_SendBlock((BYTE)(size+5));
   94   1      }
   95          
   96          void LED64_SendData(BYTE *dat, BYTE size)
   97          {
   98   1          if (size > 59)
   99   1              size = 59;
  100   1      
  101   1          UartTxBuffer[0] = 'L';
  102   1          UartTxBuffer[1] = 'E';
  103   1          UartTxBuffer[2] = 'D';
  104   1          UartTxBuffer[3] = 64;
  105   1          UartTxBuffer[4] = size;
  106   1          memcpy(&UartTxBuffer[5], dat, size);
  107   1      
  108   1          uart_SendBlock((BYTE)(size+5));
  109   1      }
  110          
  111          static void LCD12864_SetHeader()
  112          {
  113   1          UartTxBuffer[0] = 'L';
  114   1          UartTxBuffer[1] = 'C';
  115   1          UartTxBuffer[2] = 'D';
  116   1          UartTxBuffer[3] = 128;
  117   1      }
  118          
  119          void LCD12864_DisplayOff()
  120          {
  121   1          LCD12864_SetHeader();
  122   1          UartTxBuffer[4] = 2;
  123   1          UartTxBuffer[5] = 0xa0;
  124   1          UartTxBuffer[6] = 0x00;
C251 COMPILER V5.60.0,  interface                                                          09/07/22  09:47:17  PAGE 3   

  125   1      
  126   1          uart_SendBlock(7);
  127   1      }
  128          
  129          void LCD12864_DisplayOn()
  130          {
  131   1          LCD12864_SetHeader();
  132   1          UartTxBuffer[4] = 2;
  133   1          UartTxBuffer[5] = 0xa0;
  134   1          UartTxBuffer[6] = 0x01;
  135   1      
  136   1          uart_SendBlock(7);
  137   1      }
  138          
  139          void LCD12864_CursorOff()
  140          {
  141   1          LCD12864_SetHeader();
  142   1          UartTxBuffer[4] = 2;
  143   1          UartTxBuffer[5] = 0xa1;
  144   1          UartTxBuffer[6] = 0x00;
  145   1      
  146   1          uart_SendBlock(7);
  147   1      }
  148          
  149          void LCD12864_CursorOn()
  150          {
  151   1          LCD12864_SetHeader();
  152   1          UartTxBuffer[4] = 2;
  153   1          UartTxBuffer[5] = 0xa1;
  154   1          UartTxBuffer[6] = 0x01;
  155   1      
  156   1          uart_SendBlock(7);
  157   1      }
  158          
  159          void LCD12864_CursorMoveLeft()
  160          {
  161   1          LCD12864_SetHeader();
  162   1          UartTxBuffer[4] = 2;
  163   1          UartTxBuffer[5] = 0xa2;
  164   1          UartTxBuffer[6] = 0x00;
  165   1      
  166   1          uart_SendBlock(7);
  167   1      }
  168          
  169          void LCD12864_CursorMoveRight()
  170          {
  171   1          LCD12864_SetHeader();
  172   1          UartTxBuffer[4] = 2;
  173   1          UartTxBuffer[5] = 0xa2;
  174   1          UartTxBuffer[6] = 0x01;
  175   1      
  176   1          uart_SendBlock(7);
  177   1      }
  178          
  179          void LCD12864_CursorReturnHome()
  180          {
  181   1          LCD12864_SetHeader();
  182   1          UartTxBuffer[4] = 2;
  183   1          UartTxBuffer[5] = 0xa2;
  184   1          UartTxBuffer[6] = 0x02;
  185   1      
  186   1          uart_SendBlock(7);
  187   1      }
  188          
  189          void LCD12864_ScrollLeft()
  190          {
C251 COMPILER V5.60.0,  interface                                                          09/07/22  09:47:17  PAGE 4   

  191   1          LCD12864_SetHeader();
  192   1          UartTxBuffer[4] = 2;
  193   1          UartTxBuffer[5] = 0xa3;
  194   1          UartTxBuffer[6] = 0x00;
  195   1      
  196   1          uart_SendBlock(7);
  197   1      }
  198          
  199          void LCD12864_ScrollRight()
  200          {
  201   1          LCD12864_SetHeader();
  202   1          UartTxBuffer[4] = 2;
  203   1          UartTxBuffer[5] = 0xa3;
  204   1          UartTxBuffer[6] = 0x01;
  205   1      
  206   1          uart_SendBlock(7);
  207   1      }
  208          
  209          void LCD12864_ScrollUp(BYTE line)
  210          {
  211   1          LCD12864_SetHeader();
  212   1          UartTxBuffer[4] = 3;
  213   1          UartTxBuffer[5] = 0xa3;
  214   1          UartTxBuffer[6] = 0x02;
  215   1          UartTxBuffer[7] = line;
  216   1      
  217   1          uart_SendBlock(8);
  218   1      }
  219          
  220          void LCD12864_AutoWrapOff()
  221          {
  222   1          LCD12864_SetHeader();
  223   1          UartTxBuffer[4] = 2;
  224   1          UartTxBuffer[5] = 0xa4;
  225   1          UartTxBuffer[6] = 0x00;
  226   1      
  227   1          uart_SendBlock(7);
  228   1      }
  229          
  230          void LCD12864_AutoWrapOn()
  231          {
  232   1          LCD12864_SetHeader();
  233   1          UartTxBuffer[4] = 2;
  234   1          UartTxBuffer[5] = 0xa4;
  235   1          UartTxBuffer[6] = 0x01;
  236   1      
  237   1          uart_SendBlock(7);
  238   1      }
  239          
  240          void LCD12864_ReverseLine(BYTE line)
  241          {
  242   1          LCD12864_SetHeader();
  243   1          UartTxBuffer[4] = 2;
  244   1          UartTxBuffer[5] = 0xa5;
  245   1          UartTxBuffer[6] = line;
  246   1      
  247   1          uart_SendBlock(7);
  248   1      }
  249          
  250          void LCD12864_DisplayClear()
  251          {
  252   1          LCD12864_SetHeader();
  253   1          UartTxBuffer[4] = 1;
  254   1          UartTxBuffer[5] = 0xa6;
  255   1      
  256   1          uart_SendBlock(6);
C251 COMPILER V5.60.0,  interface                                                          09/07/22  09:47:17  PAGE 5   

  257   1      }
  258          
  259          static void LCD12864_SetBuffer(BYTE *dat, WORD size)
  260          {
  261   1          BYTE cnt;
  262   1          WORD addr;
  263   1      
  264   1          addr = 0;
  265   1          while (size)
  266   1          {
  267   2              cnt = 56;
  268   2              if (size < 56)
  269   2                  cnt = size;
  270   2      
  271   2              LCD12864_SetHeader();
  272   2              UartTxBuffer[4] = cnt + 3;
  273   2              UartTxBuffer[5] = 0xaf;
  274   2              *(WORD *)&UartTxBuffer[6] = addr;
  275   2              memcpy(&UartTxBuffer[8], dat, cnt);
  276   2      
  277   2              uart_SendBlock((BYTE)(cnt+8));
  278   2      
  279   2              dat += cnt;
  280   2              addr += cnt;
  281   2              size -= cnt;
  282   2          }
  283   1      }
  284          
  285          void LCD12864_ShowString(BYTE x, BYTE y, char *str)
  286          {
  287   1          LCD12864_SetBuffer(str, strlen(str) + 1);
  288   1      
  289   1          LCD12864_SetHeader();
  290   1          UartTxBuffer[4] = 3;
  291   1          UartTxBuffer[5] = 0xa7;
  292   1          UartTxBuffer[6] = x;
  293   1          UartTxBuffer[7] = y;
  294   1      
  295   1          uart_SendBlock(8);
  296   1      }
  297          
  298          void LCD12864_ShowPicture(BYTE x, BYTE y, BYTE cx, BYTE cy, BYTE *dat)
  299          {
  300   1          LCD12864_SetBuffer(dat, (WORD)(2UL*cx*cy));
  301   1      
  302   1          LCD12864_SetHeader();
  303   1          UartTxBuffer[4] = 5;
  304   1          UartTxBuffer[5] = 0xa8;
  305   1          UartTxBuffer[6] = x;
  306   1          UartTxBuffer[7] = y;
  307   1          UartTxBuffer[8] = cx;
  308   1          UartTxBuffer[9] = cy;
  309   1      
  310   1          uart_SendBlock(10);
  311   1      }
  312          
  313          static void OLED12864_SetHeader()
  314          {
  315   1          UartTxBuffer[0] = 'O';
  316   1          UartTxBuffer[1] = 'L';
  317   1          UartTxBuffer[2] = 'E';
  318   1          UartTxBuffer[3] = 128;
  319   1      }
  320          
  321          void OLED12864_DisplayOff()
  322          {
C251 COMPILER V5.60.0,  interface                                                          09/07/22  09:47:17  PAGE 6   

  323   1          OLED12864_SetHeader();
  324   1          UartTxBuffer[4] = 2;
  325   1          UartTxBuffer[5] = 0xc0;
  326   1          UartTxBuffer[6] = 0x00;
  327   1      
  328   1          uart_SendBlock(7);
  329   1      }
  330          
  331          void OLED12864_DisplayOn()
  332          {
  333   1          OLED12864_SetHeader();
  334   1          UartTxBuffer[4] = 2;
  335   1          UartTxBuffer[5] = 0xc0;
  336   1          UartTxBuffer[6] = 0x01;
  337   1      
  338   1          uart_SendBlock(7);
  339   1      }
  340          
  341          void OLED12864_DisplayContent()
  342          {
  343   1          OLED12864_SetHeader();
  344   1          UartTxBuffer[4] = 2;
  345   1          UartTxBuffer[5] = 0xc1;
  346   1          UartTxBuffer[6] = 0x00;
  347   1      
  348   1          uart_SendBlock(7);
  349   1      }
  350          
  351          void OLED12864_DisplayEntire()
  352          {
  353   1          OLED12864_SetHeader();
  354   1          UartTxBuffer[4] = 2;
  355   1          UartTxBuffer[5] = 0xc1;
  356   1          UartTxBuffer[6] = 0x01;
  357   1      
  358   1          uart_SendBlock(7);
  359   1      }
  360          
  361          void OLED12864_HorizontalMirror()
  362          {
  363   1          OLED12864_SetHeader();
  364   1          UartTxBuffer[4] = 2;
  365   1          UartTxBuffer[5] = 0xc2;
  366   1          UartTxBuffer[6] = 0x00;
  367   1      
  368   1          uart_SendBlock(7);
  369   1      }
  370          
  371          void OLED12864_VerticalMirror()
  372          {
  373   1          OLED12864_SetHeader();
  374   1          UartTxBuffer[4] = 2;
  375   1          UartTxBuffer[5] = 0xc2;
  376   1          UartTxBuffer[6] = 0x01;
  377   1      
  378   1          uart_SendBlock(7);
  379   1      }
  380          
  381          void OLED12864_DisplayReverse()
  382          {
  383   1          OLED12864_SetHeader();
  384   1          UartTxBuffer[4] = 1;
  385   1          UartTxBuffer[5] = 0xc3;
  386   1      
  387   1          uart_SendBlock(6);
  388   1      }
C251 COMPILER V5.60.0,  interface                                                          09/07/22  09:47:17  PAGE 7   

  389          
  390          void OLED12864_SetContrast(BYTE bContrast)
  391          {
  392   1          OLED12864_SetHeader();
  393   1          UartTxBuffer[4] = 2;
  394   1          UartTxBuffer[5] = 0xc4;
  395   1          UartTxBuffer[6] = bContrast;
  396   1      
  397   1          uart_SendBlock(7);
  398   1      }
  399          
  400          void OLED12864_SetAddressMode(BYTE bMode)
  401          {
  402   1          OLED12864_SetHeader();
  403   1          UartTxBuffer[4] = 2;
  404   1          UartTxBuffer[5] = 0xc5;
  405   1          UartTxBuffer[6] = bMode;
  406   1      
  407   1          uart_SendBlock(7);
  408   1      }
  409          
  410          void OLED12864_ScrollLeft(BYTE bPageStart, BYTE bPageEnd, WORD nInterval)
  411          {
  412   1          OLED12864_SetHeader();
  413   1          UartTxBuffer[4] = 6;
  414   1          UartTxBuffer[5] = 0xc6;
  415   1          UartTxBuffer[6] = 0x00;
  416   1          UartTxBuffer[7] = bPageStart;
  417   1          UartTxBuffer[8] = bPageEnd;
  418   1          *(WORD *)&UartTxBuffer[9] = nInterval;
  419   1      
  420   1          uart_SendBlock(11);
  421   1      }
  422          
  423          void OLED12864_ScrollRight(BYTE bPageStart, BYTE bPageEnd, WORD nInterval)
  424          {
  425   1          OLED12864_SetHeader();
  426   1          UartTxBuffer[4] = 6;
  427   1          UartTxBuffer[5] = 0xc6;
  428   1          UartTxBuffer[6] = 0x01;
  429   1          UartTxBuffer[7] = bPageStart;
  430   1          UartTxBuffer[8] = bPageEnd;
  431   1          *(WORD *)&UartTxBuffer[9] = nInterval;
  432   1      
  433   1          uart_SendBlock(11);
  434   1      }
  435          
  436          void OLED12864_ScrollUp(BYTE bPageStart, BYTE bPageEnd, WORD nInterval)
  437          {
  438   1          OLED12864_SetHeader();
  439   1          UartTxBuffer[4] = 6;
  440   1          UartTxBuffer[5] = 0xc6;
  441   1          UartTxBuffer[6] = 0x02;
  442   1          UartTxBuffer[7] = bPageStart;
  443   1          UartTxBuffer[8] = bPageEnd;
  444   1          *(WORD *)&UartTxBuffer[9] = nInterval;
  445   1      
  446   1          uart_SendBlock(11);
  447   1      }
  448          
  449          void OLED12864_ScrollStart()
  450          {
  451   1          OLED12864_SetHeader();
  452   1          UartTxBuffer[4] = 2;
  453   1          UartTxBuffer[5] = 0xc7;
  454   1          UartTxBuffer[6] = 0x01;
C251 COMPILER V5.60.0,  interface                                                          09/07/22  09:47:17  PAGE 8   

  455   1      
  456   1          uart_SendBlock(7);
  457   1      }
  458          
  459          void OLED12864_ScrollStop()
  460          {
  461   1          OLED12864_SetHeader();
  462   1          UartTxBuffer[4] = 2;
  463   1          UartTxBuffer[5] = 0xc7;
  464   1          UartTxBuffer[6] = 0x00;
  465   1      
  466   1          uart_SendBlock(7);
  467   1      }
  468          
  469          static void OLED12864_SetBuffer(BYTE *dat, WORD size)
  470          {
  471   1          BYTE cnt;
  472   1          WORD addr;
  473   1      
  474   1          addr = 0;
  475   1          while (size)
  476   1          {
  477   2              cnt = 56;
  478   2              if (size < 56)
  479   2                  cnt = size;
  480   2      
  481   2              OLED12864_SetHeader();
  482   2              UartTxBuffer[4] = cnt + 3;
  483   2              UartTxBuffer[5] = 0xcf;
  484   2              *(WORD *)&UartTxBuffer[6] = addr;
  485   2              memcpy(&UartTxBuffer[8], dat, cnt);
  486   2      
  487   2              uart_SendBlock((BYTE)(cnt+8));
  488   2      
  489   2              dat += cnt;
  490   2              addr += cnt;
  491   2              size -= cnt;
  492   2          }
  493   1      }
  494          
  495          void OLED12864_ShowPicture(BYTE x, BYTE y, BYTE cx, BYTE cy, BYTE *dat)
  496          {
  497   1          OLED12864_SetBuffer(dat, (WORD)cx*cy);
  498   1      
  499   1          OLED12864_SetHeader();
  500   1          UartTxBuffer[4] = 5;
  501   1          UartTxBuffer[5] = 0xc8;
  502   1          UartTxBuffer[6] = x;
  503   1          UartTxBuffer[7] = y;
  504   1          UartTxBuffer[8] = cx;
  505   1          UartTxBuffer[9] = cy;
  506   1      
  507   1          uart_SendBlock(10);
  508   1      }
  509          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1799     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------         60
C251 COMPILER V5.60.0,  interface                                                          09/07/22  09:47:17  PAGE 9   

  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
