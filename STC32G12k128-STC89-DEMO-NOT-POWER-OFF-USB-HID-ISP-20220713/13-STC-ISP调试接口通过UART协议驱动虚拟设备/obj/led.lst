C251 COMPILER V5.60.0,  led                                                                08/07/22  15:09:41  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE led
OBJECT MODULE PLACED IN .\obj\led.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE src\led.c XSMALL INTR2 BROWSE DEBUG PRINT(.\obj\led.lst) OBJECT(.\obj\
                    -led.obj) 

stmt  level    source

    1          #include "stc.h"
    2          #include "uart.h"
    3          #include "led.h"
    4          
    5          static void SEG7_SetHeader()
    6          {
    7   1          UartTxBuffer[0] = '7';
    8   1          UartTxBuffer[1] = 'S';
    9   1          UartTxBuffer[2] = 'E';
   10   1          UartTxBuffer[3] = 'G';
   11   1      }
   12          
   13          void SEG7_ShowLong(long n, char radix)
   14          {
   15   1          SEG7_SetHeader();
   16   1          UartTxBuffer[4] = 'L';
   17   1          UartTxBuffer[5] = 0x01;
   18   1          UartTxBuffer[6] = radix;
   19   1          UartTxBuffer[7] = 0x00;
   20   1          *(long *)&UartTxBuffer[8] = n;
   21   1      
   22   1          uart_SendBlock(12);
   23   1      }
   24          
   25          void SEG7_ShowFloat(float f)
   26          {
   27   1          SEG7_SetHeader();
   28   1          UartTxBuffer[4] = 'D';
   29   1          UartTxBuffer[5] = 0x01;
   30   1          UartTxBuffer[6] = 0x00;
   31   1          UartTxBuffer[7] = 0x00;
   32   1          *(float *)&UartTxBuffer[8] = f;
   33   1      
   34   1          uart_SendBlock(12);
   35   1      }
   36          
   37          void SEG7_ShowCode(BYTE *cod)
   38          {
   39   1          SEG7_SetHeader();
   40   1          UartTxBuffer[4] = 'C';
   41   1          UartTxBuffer[5] = 0x00;
   42   1          UartTxBuffer[6] = 0x00;
   43   1          UartTxBuffer[7] = 0x00;
   44   1          memcpy(&UartTxBuffer[8], cod, 8);
   45   1      
   46   1          uart_SendBlock(16);
   47   1      }
   48          
   49          int SEG7_ShowString (const char *fmt, ...)
   50          {
   51   1          va_list va;
   52   1          int ret;
   53   1      
   54   1          SEG7_SetHeader();
   55   1          UartTxBuffer[4] = 'S';
   56   1          UartTxBuffer[5] = 0x00;
   57   1          UartTxBuffer[6] = 0x00;
   58   1          UartTxBuffer[7] = 0x00;
C251 COMPILER V5.60.0,  led                                                                08/07/22  15:09:41  PAGE 2   

   59   1      
   60   1          va_start(va, fmt);
   61   1          ret = vsprintf(&UartTxBuffer[8], fmt, va) + 8;
   62   1          va_end(va);
   63   1      
   64   1          uart_SendBlock((BYTE)(ret+1));
   65   1      
   66   1          return ret;
   67   1      }
   68          
   69          void LED40_SendData(BYTE *dat, BYTE size)
   70          {
   71   1          if (size > 59)
   72   1              size = 59;
   73   1      
   74   1          UartTxBuffer[0] = 'L';
   75   1          UartTxBuffer[1] = 'E';
   76   1          UartTxBuffer[2] = 'D';
   77   1          UartTxBuffer[3] = 40;
   78   1          UartTxBuffer[4] = size;
   79   1          memcpy(&UartTxBuffer[5], dat, size);
   80   1      
   81   1          uart_SendBlock((BYTE)(size+5));
   82   1      }
   83          
   84          void LED64_SendData(BYTE *dat, BYTE size)
   85          {
   86   1          if (size > 59)
   87   1              size = 59;
   88   1      
   89   1          UartTxBuffer[0] = 'L';
   90   1          UartTxBuffer[1] = 'E';
   91   1          UartTxBuffer[2] = 'D';
   92   1          UartTxBuffer[3] = 64;
   93   1          UartTxBuffer[4] = size;
   94   1          memcpy(&UartTxBuffer[5], dat, size);
   95   1      
   96   1          uart_SendBlock((BYTE)(size+5));
   97   1      }
   98          
   99          static void LCD12864_SetHeader()
  100          {
  101   1          UartTxBuffer[0] = 'L';
  102   1          UartTxBuffer[1] = 'C';
  103   1          UartTxBuffer[2] = 'D';
  104   1          UartTxBuffer[3] = 128;
  105   1      }
  106          
  107          void LCD12864_DisplayOff()
  108          {
  109   1          LCD12864_SetHeader();
  110   1          UartTxBuffer[4] = 2;
  111   1          UartTxBuffer[5] = 0xa0;
  112   1          UartTxBuffer[6] = 0x00;
  113   1      
  114   1          uart_SendBlock(7);
  115   1      }
  116          
  117          void LCD12864_DisplayOn()
  118          {
  119   1          LCD12864_SetHeader();
  120   1          UartTxBuffer[4] = 2;
  121   1          UartTxBuffer[5] = 0xa0;
  122   1          UartTxBuffer[6] = 0x01;
  123   1      
  124   1          uart_SendBlock(7);
C251 COMPILER V5.60.0,  led                                                                08/07/22  15:09:41  PAGE 3   

  125   1      }
  126          
  127          void LCD12864_CursorOff()
  128          {
  129   1          LCD12864_SetHeader();
  130   1          UartTxBuffer[4] = 2;
  131   1          UartTxBuffer[5] = 0xa1;
  132   1          UartTxBuffer[6] = 0x00;
  133   1      
  134   1          uart_SendBlock(7);
  135   1      }
  136          
  137          void LCD12864_CursorOn()
  138          {
  139   1          LCD12864_SetHeader();
  140   1          UartTxBuffer[4] = 2;
  141   1          UartTxBuffer[5] = 0xa1;
  142   1          UartTxBuffer[6] = 0x01;
  143   1      
  144   1          uart_SendBlock(7);
  145   1      }
  146          
  147          void LCD12864_CursorMoveLeft()
  148          {
  149   1          LCD12864_SetHeader();
  150   1          UartTxBuffer[4] = 2;
  151   1          UartTxBuffer[5] = 0xa2;
  152   1          UartTxBuffer[6] = 0x00;
  153   1      
  154   1          uart_SendBlock(7);
  155   1      }
  156          
  157          void LCD12864_CursorMoveRight()
  158          {
  159   1          LCD12864_SetHeader();
  160   1          UartTxBuffer[4] = 2;
  161   1          UartTxBuffer[5] = 0xa2;
  162   1          UartTxBuffer[6] = 0x01;
  163   1      
  164   1          uart_SendBlock(7);
  165   1      }
  166          
  167          void LCD12864_CursorReturnHome()
  168          {
  169   1          LCD12864_SetHeader();
  170   1          UartTxBuffer[4] = 2;
  171   1          UartTxBuffer[5] = 0xa2;
  172   1          UartTxBuffer[6] = 0x02;
  173   1      
  174   1          uart_SendBlock(7);
  175   1      }
  176          
  177          void LCD12864_ScrollLeft()
  178          {
  179   1          LCD12864_SetHeader();
  180   1          UartTxBuffer[4] = 2;
  181   1          UartTxBuffer[5] = 0xa3;
  182   1          UartTxBuffer[6] = 0x00;
  183   1      
  184   1          uart_SendBlock(7);
  185   1      }
  186          
  187          void LCD12864_ScrollRight()
  188          {
  189   1          LCD12864_SetHeader();
  190   1          UartTxBuffer[4] = 2;
C251 COMPILER V5.60.0,  led                                                                08/07/22  15:09:41  PAGE 4   

  191   1          UartTxBuffer[5] = 0xa3;
  192   1          UartTxBuffer[6] = 0x01;
  193   1      
  194   1          uart_SendBlock(7);
  195   1      }
  196          
  197          void LCD12864_ScrollUp(BYTE line)
  198          {
  199   1          LCD12864_SetHeader();
  200   1          UartTxBuffer[4] = 3;
  201   1          UartTxBuffer[5] = 0xa3;
  202   1          UartTxBuffer[6] = 0x02;
  203   1          UartTxBuffer[7] = line;
  204   1      
  205   1          uart_SendBlock(7);
  206   1      }
  207          
  208          void LCD12864_AutoWrapOff()
  209          {
  210   1          LCD12864_SetHeader();
  211   1          UartTxBuffer[4] = 2;
  212   1          UartTxBuffer[5] = 0xa4;
  213   1          UartTxBuffer[6] = 0x00;
  214   1      
  215   1          uart_SendBlock(7);
  216   1      }
  217          
  218          void LCD12864_AutoWrapOn()
  219          {
  220   1          LCD12864_SetHeader();
  221   1          UartTxBuffer[4] = 2;
  222   1          UartTxBuffer[5] = 0xa4;
  223   1          UartTxBuffer[6] = 0x01;
  224   1      
  225   1          uart_SendBlock(7);
  226   1      }
  227          
  228          void LCD12864_ReverseLine(BYTE line)
  229          {
  230   1          LCD12864_SetHeader();
  231   1          UartTxBuffer[4] = 2;
  232   1          UartTxBuffer[5] = 0xa5;
  233   1          UartTxBuffer[6] = line;
  234   1      
  235   1          uart_SendBlock(7);
  236   1      }
  237          
  238          void LCD12864_DisplayClear()
  239          {
  240   1          LCD12864_SetHeader();
  241   1          UartTxBuffer[4] = 1;
  242   1          UartTxBuffer[5] = 0xa6;
  243   1      
  244   1          uart_SendBlock(6);
  245   1      }
  246          
  247          static void LCD12864_SetBuffer(BYTE *dat, WORD size)
  248          {
  249   1          BYTE cnt;
  250   1          WORD addr;
  251   1      
  252   1          addr = 0;
  253   1          while (size)
  254   1          {
  255   2              cnt = 56;
  256   2              if (size < 56)
C251 COMPILER V5.60.0,  led                                                                08/07/22  15:09:41  PAGE 5   

  257   2                  cnt = size;
  258   2      
  259   2              LCD12864_SetHeader();
  260   2              UartTxBuffer[4] = cnt + 3;
  261   2              UartTxBuffer[5] = 0xaf;
  262   2              *(WORD *)&UartTxBuffer[6] = addr;
  263   2              memcpy(&UartTxBuffer[8], dat, cnt);
  264   2      
  265   2              uart_SendBlock((BYTE)(cnt+8));
  266   2      
  267   2              dat += cnt;
  268   2              addr += cnt;
  269   2              size -= cnt;
  270   2          }
  271   1      }
  272          
  273          void LCD12864_ShowString(BYTE x, BYTE y, char *str)
  274          {
  275   1          LCD12864_SetBuffer(str, strlen(str) + 1);
  276   1      
  277   1          LCD12864_SetHeader();
  278   1          UartTxBuffer[4] = 3;
  279   1          UartTxBuffer[5] = 0xa7;
  280   1          UartTxBuffer[6] = x;
  281   1          UartTxBuffer[7] = y;
  282   1      
  283   1          uart_SendBlock(8);
  284   1      }
  285          
  286          void LCD12864_ShowPicture(BYTE x, BYTE y, BYTE cx, BYTE cy, BYTE *dat)
  287          {
  288   1          LCD12864_SetBuffer(dat, (WORD)(2UL*cx*cy));
  289   1      
  290   1          LCD12864_SetHeader();
  291   1          UartTxBuffer[4] = 5;
  292   1          UartTxBuffer[5] = 0xa8;
  293   1          UartTxBuffer[6] = x;
  294   1          UartTxBuffer[7] = y;
  295   1          UartTxBuffer[8] = cx;
  296   1          UartTxBuffer[9] = cy;
  297   1      
  298   1          uart_SendBlock(10);
  299   1      }
  300          
  301          static void OLED12864_SetHeader()
  302          {
  303   1          UartTxBuffer[0] = 'O';
  304   1          UartTxBuffer[1] = 'L';
  305   1          UartTxBuffer[2] = 'E';
  306   1          UartTxBuffer[3] = 128;
  307   1      }
  308          
  309          void OLED12864_DisplayOff()
  310          {
  311   1          OLED12864_SetHeader();
  312   1          UartTxBuffer[4] = 2;
  313   1          UartTxBuffer[5] = 0xc0;
  314   1          UartTxBuffer[6] = 0x00;
  315   1      
  316   1          uart_SendBlock(7);
  317   1      }
  318          
  319          void OLED12864_DisplayOn()
  320          {
  321   1          OLED12864_SetHeader();
  322   1          UartTxBuffer[4] = 2;
C251 COMPILER V5.60.0,  led                                                                08/07/22  15:09:41  PAGE 6   

  323   1          UartTxBuffer[5] = 0xc0;
  324   1          UartTxBuffer[6] = 0x01;
  325   1      
  326   1          uart_SendBlock(7);
  327   1      }
  328          
  329          void OLED12864_DisplayContent()
  330          {
  331   1          OLED12864_SetHeader();
  332   1          UartTxBuffer[4] = 2;
  333   1          UartTxBuffer[5] = 0xc1;
  334   1          UartTxBuffer[6] = 0x00;
  335   1      
  336   1          uart_SendBlock(7);
  337   1      }
  338          
  339          void OLED12864_DisplayEntire()
  340          {
  341   1          OLED12864_SetHeader();
  342   1          UartTxBuffer[4] = 2;
  343   1          UartTxBuffer[5] = 0xc1;
  344   1          UartTxBuffer[6] = 0x01;
  345   1      
  346   1          uart_SendBlock(7);
  347   1      }
  348          
  349          void OLED12864_HorizontalMirror()
  350          {
  351   1          OLED12864_SetHeader();
  352   1          UartTxBuffer[4] = 2;
  353   1          UartTxBuffer[5] = 0xc2;
  354   1          UartTxBuffer[6] = 0x00;
  355   1      
  356   1          uart_SendBlock(7);
  357   1      }
  358          
  359          void OLED12864_VerticalMirror()
  360          {
  361   1          OLED12864_SetHeader();
  362   1          UartTxBuffer[4] = 2;
  363   1          UartTxBuffer[5] = 0xc2;
  364   1          UartTxBuffer[6] = 0x01;
  365   1      
  366   1          uart_SendBlock(7);
  367   1      }
  368          
  369          void OLED12864_DisplayReverse()
  370          {
  371   1          OLED12864_SetHeader();
  372   1          UartTxBuffer[4] = 1;
  373   1          UartTxBuffer[5] = 0xc3;
  374   1      
  375   1          uart_SendBlock(6);
  376   1      }
  377          
  378          void OLED12864_SetContrast(BYTE bContrast)
  379          {
  380   1          OLED12864_SetHeader();
  381   1          UartTxBuffer[4] = 2;
  382   1          UartTxBuffer[5] = 0xc4;
  383   1          UartTxBuffer[6] = bContrast;
  384   1      
  385   1          uart_SendBlock(7);
  386   1      }
  387          
  388          void OLED12864_SetAddressMode(BYTE bMode)
C251 COMPILER V5.60.0,  led                                                                08/07/22  15:09:41  PAGE 7   

  389          {
  390   1          OLED12864_SetHeader();
  391   1          UartTxBuffer[4] = 2;
  392   1          UartTxBuffer[5] = 0xc5;
  393   1          UartTxBuffer[6] = bMode;
  394   1      
  395   1          uart_SendBlock(7);
  396   1      }
  397          
  398          void OLED12864_ScrollLeft(BYTE bPageStart, BYTE bPageEnd, WORD nInterval)
  399          {
  400   1          OLED12864_SetHeader();
  401   1          UartTxBuffer[4] = 6;
  402   1          UartTxBuffer[5] = 0xc6;
  403   1          UartTxBuffer[6] = 0x00;
  404   1          UartTxBuffer[7] = bPageStart;
  405   1          UartTxBuffer[8] = bPageEnd;
  406   1          *(WORD *)&UartTxBuffer[9] = nInterval;
  407   1      
  408   1          uart_SendBlock(11);
  409   1      }
  410          
  411          void OLED12864_ScrollRight(BYTE bPageStart, BYTE bPageEnd, WORD nInterval)
  412          {
  413   1          OLED12864_SetHeader();
  414   1          UartTxBuffer[4] = 6;
  415   1          UartTxBuffer[5] = 0xc6;
  416   1          UartTxBuffer[6] = 0x01;
  417   1          UartTxBuffer[7] = bPageStart;
  418   1          UartTxBuffer[8] = bPageEnd;
  419   1          *(WORD *)&UartTxBuffer[9] = nInterval;
  420   1      
  421   1          uart_SendBlock(11);
  422   1      }
  423          
  424          void OLED12864_ScrollUp(BYTE bPageStart, BYTE bPageEnd, WORD nInterval)
  425          {
  426   1          OLED12864_SetHeader();
  427   1          UartTxBuffer[4] = 6;
  428   1          UartTxBuffer[5] = 0xc6;
  429   1          UartTxBuffer[6] = 0x02;
  430   1          UartTxBuffer[7] = bPageStart;
  431   1          UartTxBuffer[8] = bPageEnd;
  432   1          *(WORD *)&UartTxBuffer[9] = nInterval;
  433   1      
  434   1          uart_SendBlock(11);
  435   1      }
  436          
  437          void OLED12864_ScrollStart()
  438          {
  439   1          OLED12864_SetHeader();
  440   1          UartTxBuffer[4] = 2;
  441   1          UartTxBuffer[5] = 0xc7;
  442   1          UartTxBuffer[6] = 0x01;
  443   1      
  444   1          uart_SendBlock(7);
  445   1      }
  446          
  447          void OLED12864_ScrollStop()
  448          {
  449   1          OLED12864_SetHeader();
  450   1          UartTxBuffer[4] = 2;
  451   1          UartTxBuffer[5] = 0xc7;
  452   1          UartTxBuffer[6] = 0x00;
  453   1      
  454   1          uart_SendBlock(7);
C251 COMPILER V5.60.0,  led                                                                08/07/22  15:09:41  PAGE 8   

  455   1      }
  456          
  457          static void OLED12864_SetBuffer(BYTE *dat, WORD size)
  458          {
  459   1          BYTE cnt;
  460   1          WORD addr;
  461   1      
  462   1          addr = 0;
  463   1          while (size)
  464   1          {
  465   2              cnt = 56;
  466   2              if (size < 56)
  467   2                  cnt = size;
  468   2      
  469   2              OLED12864_SetHeader();
  470   2              UartTxBuffer[4] = cnt + 3;
  471   2              UartTxBuffer[5] = 0xcf;
  472   2              *(WORD *)&UartTxBuffer[6] = addr;
  473   2              memcpy(&UartTxBuffer[8], dat, cnt);
  474   2      
  475   2              uart_SendBlock((BYTE)(cnt+8));
  476   2      
  477   2              dat += cnt;
  478   2              addr += cnt;
  479   2              size -= cnt;
  480   2          }
  481   1      }
  482          
  483          void OLED12864_ShowPicture(BYTE x, BYTE y, BYTE cx, BYTE cy, BYTE *dat)
  484          {
  485   1          OLED12864_SetBuffer(dat, (WORD)cx*cy);
  486   1      
  487   1          OLED12864_SetHeader();
  488   1          UartTxBuffer[4] = 5;
  489   1          UartTxBuffer[5] = 0xc8;
  490   1          UartTxBuffer[6] = x;
  491   1          UartTxBuffer[7] = y;
  492   1          UartTxBuffer[8] = cx;
  493   1          UartTxBuffer[9] = cy;
  494   1      
  495   1          uart_SendBlock(10);
  496   1      }
  497          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1799     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------         60
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
