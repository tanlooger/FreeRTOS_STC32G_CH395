C251 COMPILER V5.60.0,  PWM                                                                09/07/22  13:58:55  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE PWM
OBJECT MODULE PLACED IN PWM.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE PWM.c XSMALL INTR2 BROWSE DEBUG

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCMCU.com --------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- QQ:  800003751 -------------------------------------------------*/
   10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
   11          /*---------------------------------------------------------------------*/
   12          
   13          
   14          /*************  功能说明    **************
   15          
   16          本例程基于STC32G转STC89系列转接板（降龙棍）进行编写测试。
   17          
   18          高级PWM定时器 PWM1P/PWM1N,PWM2P/PWM2N,PWM3P/PWM3N,PWM4P/PWM4N 每个通道都可独立实现PWM输出，或者两两互补对
             -称输出.
   19          
   20          8个通道PWM设置对应P1的8个端口（PWM2P对应P5.4口，需要短接JP1才能输出PWM到LED上）.
   21          
   22          通过P1口上连接的8个LED灯，利用PWM实现呼吸灯效果.
   23          
   24          PWM周期和占空比可以根据需要自行设置，最高可达65535.
   25          
   26          此外程序演示两种复位进入USB下载模式的方法：
   27          1. 通过每1毫秒执行一次“KeyResetScan”函数，实现长按P3.2口按键触发MCU复位，进入USB下载模式。
   28          2. 通过加载“stc_usb_hid_32g.lib”库函数，实现使用STC-ISP软件发送指令触发MCU复位，进入USB下载模式并自动下
             -载。
   29          
   30          下载时, 选择时钟 24MHZ (用户可自行修改频率).
   31          
   32          ******************************************/
   33          
   34          #include "../comm/STC32G.h"  //包含此头文件后，不需要再包含"reg51.h"头文件
   35          #include "../comm/usb.h"     //USB调试及复位所需头文件
   36          #include "intrins.h"
   37          
   38          /****************************** 用户定义宏 ***********************************/
   39          
   40          #define MAIN_Fosc       24000000L   //定义主时钟
   41          #define Timer0_Reload   (65536UL -(MAIN_Fosc / 1000))       //Timer 0 中断频率, 1000次/秒
   42          
   43          /*****************************************************************************/
   44          
   45          #define PWM1_1      0x00        //P:P1.0  N:P1.1
   46          #define PWM1_2      0x01        //P:P2.0  N:P2.1
   47          #define PWM1_3      0x02        //P:P6.0  N:P6.1
   48          
   49          #define PWM2_1      0x00        //P:P1.2/P5.4  N:P1.3
   50          #define PWM2_2      0x04        //P:P2.2  N:P2.3
   51          #define PWM2_3      0x08        //P:P6.2  N:P6.3
   52          
   53          #define PWM3_1      0x00        //P:P1.4  N:P1.5
   54          #define PWM3_2      0x10        //P:P2.4  N:P2.5
   55          #define PWM3_3      0x20        //P:P6.4  N:P6.5
   56          
   57          #define PWM4_1      0x00        //P:P1.6  N:P1.7
C251 COMPILER V5.60.0,  PWM                                                                09/07/22  13:58:55  PAGE 2   

   58          #define PWM4_2      0x40        //P:P2.6  N:P2.7
   59          #define PWM4_3      0x80        //P:P6.6  N:P6.7
   60          #define PWM4_4      0xC0        //P:P3.4  N:P3.3
   61          
   62          #define ENO1P       0x01
   63          #define ENO1N       0x02
   64          #define ENO2P       0x04
   65          #define ENO2N       0x08
   66          #define ENO3P       0x10
   67          #define ENO3N       0x20
   68          #define ENO4P       0x40
   69          #define ENO4N       0x80
   70          
   71          #define PWM_PERIOD  1023    //设置周期值
   72          
   73          /*************  本地变量声明    **************/
   74          bit B_1ms;          //1ms标志
   75          
   76          u16 PWM1_Duty;
   77          u16 PWM2_Duty;
   78          u16 PWM3_Duty;
   79          u16 PWM4_Duty;
   80          
   81          bit PWM1_Flag;
   82          bit PWM2_Flag;
   83          bit PWM3_Flag;
   84          bit PWM4_Flag;
   85          
   86          //USB调试及复位所需定义
   87          char *USER_DEVICEDESC = NULL;
   88          char *USER_PRODUCTDESC = NULL;
   89          char *USER_STCISPCMD = "@STCISP#";                      //设置自动复位到ISP区的用户接口命令
   90          
   91          //P3.2口按键复位所需变量
   92          bit Key_Flag;
   93          u16 Key_cnt;
   94          
   95          void UpdatePwm(void);
   96          void KeyResetScan(void);
   97          
   98          /******************** 主函数 **************************/
   99          void main(void)
  100          {
  101   1          WTST = 0;  //设置程序指令延时参数，赋值为0可将CPU执行指令的速度设置为最快
  102   1          EAXFR = 1; //扩展寄存器(XFR)访问使能
  103   1          CKCON = 0; //提高访问XRAM速度
  104   1      
  105   1          P0M1 = 0x00;   P0M0 = 0x00;   //设置为准双向口
  106   1          P1M1 = 0x00;   P1M0 = 0x00;   //设置为准双向口
  107   1          P2M1 = 0x00;   P2M0 = 0x00;   //设置为准双向口
  108   1          P3M1 = 0x00;   P3M0 = 0x00;   //设置为准双向口
  109   1          P4M1 = 0x00;   P4M0 = 0x00;   //设置为准双向口
  110   1          P5M1 = 0x00;   P5M0 = 0x00;   //设置为准双向口
  111   1          P6M1 = 0x00;   P6M0 = 0x00;   //设置为准双向口
  112   1          P7M1 = 0x00;   P7M0 = 0x00;   //设置为准双向口
  113   1      
  114   1          PWM1_Flag = 0;
  115   1          PWM2_Flag = 0;
  116   1          PWM3_Flag = 0;
  117   1          PWM4_Flag = 0;
  118   1      
  119   1          PWM1_Duty = 0;
  120   1          PWM2_Duty = 256;
  121   1          PWM3_Duty = 512;
  122   1          PWM4_Duty = 1024;
  123   1      
C251 COMPILER V5.60.0,  PWM                                                                09/07/22  13:58:55  PAGE 3   

  124   1          //USB调试及复位所需代码-----
  125   1          P3M0 &= ~0x03;
  126   1          P3M1 |= 0x03;
  127   1          IRC48MCR = 0x80;
  128   1          while (!(IRC48MCR & 0x01));
  129   1          usb_init();
  130   1          //-------------------------
  131   1      
  132   1          //  Timer0初始化
  133   1          AUXR = 0x80;    //Timer0 set as 1T, 16 bits timer auto-reload, 
  134   1          TH0 = (u8)(Timer0_Reload / 256);
  135   1          TL0 = (u8)(Timer0_Reload % 256);
  136   1          ET0 = 1;    //Timer0 interrupt enable
  137   1          TR0 = 1;    //Tiner0 run
  138   1      
  139   1          PWMA_CCER1 = 0x00; //写 CCMRx 前必须先清零 CCxE 关闭通道
  140   1          PWMA_CCER2 = 0x00;
  141   1          PWMA_CCMR1 = 0x60; //通道模式配置
  142   1          PWMA_CCMR2 = 0x60;
  143   1          PWMA_CCMR3 = 0x60;
  144   1          PWMA_CCMR4 = 0x60;
  145   1          PWMA_CCER1 = 0x55; //配置通道输出使能和极性
  146   1          PWMA_CCER2 = 0x55;
  147   1      
  148   1          PWMA_ARRH = (u8)(PWM_PERIOD >> 8); //设置周期时间
  149   1          PWMA_ARRL = (u8)PWM_PERIOD;
  150   1      
  151   1          PWMA_ENO = 0x00;
  152   1          PWMA_ENO |= ENO1P; //使能输出
  153   1          PWMA_ENO |= ENO1N; //使能输出
  154   1          PWMA_ENO |= ENO2P; //使能输出
  155   1          PWMA_ENO |= ENO2N; //使能输出
  156   1          PWMA_ENO |= ENO3P; //使能输出
  157   1          PWMA_ENO |= ENO3N; //使能输出
  158   1          PWMA_ENO |= ENO4P; //使能输出
  159   1          PWMA_ENO |= ENO4N; //使能输出
  160   1      
  161   1          PWMA_PS = 0x00;  //高级 PWM 通道输出脚选择位
  162   1          PWMA_PS |= PWM1_1; //选择 PWM1_1 通道
  163   1          PWMA_PS |= PWM2_1; //选择 PWM2_1 通道
  164   1          PWMA_PS |= PWM3_1; //选择 PWM3_1 通道
  165   1          PWMA_PS |= PWM4_1; //选择 PWM4_1 通道
  166   1      
  167   1          PWMA_BKR = 0x80; //使能主输出
  168   1          PWMA_CR1 |= 0x01; //开始计时
  169   1      
  170   1          EUSB = 1;   //IE2相关的中断位操作使能后，需要重新设置EUSB
  171   1          EA = 1;     //打开总中断
  172   1      
  173   1          while (1)
  174   1          {
  175   2              if (bUsbOutReady) //USB调试及复位所需代码
  176   2              {
  177   3      //            memcpy(UsbInBuffer, UsbOutBuffer, 64);      //原路返回, 用于测试HID
  178   3      //            usb_IN();
  179   3                  
  180   3                  usb_OUT_done();
  181   3              }
  182   2          }
  183   1      }
  184          
  185          
  186          /********************** Timer0 1ms中断函数 ************************/
  187          void timer0(void) interrupt 1
  188          {
  189   1          if(!PWM1_Flag)
C251 COMPILER V5.60.0,  PWM                                                                09/07/22  13:58:55  PAGE 4   

  190   1          {
  191   2              PWM1_Duty++;
  192   2              if(PWM1_Duty > PWM_PERIOD) PWM1_Flag = 1;
  193   2          }
  194   1          else
  195   1          {
  196   2              PWM1_Duty--;
  197   2              if(PWM1_Duty <= 0) PWM1_Flag = 0;
  198   2          }
  199   1      
  200   1          if(!PWM2_Flag)
  201   1          {
  202   2              PWM2_Duty++;
  203   2              if(PWM2_Duty > PWM_PERIOD) PWM2_Flag = 1;
  204   2          }
  205   1          else
  206   1          {
  207   2              PWM2_Duty--;
  208   2              if(PWM2_Duty <= 0) PWM2_Flag = 0;
  209   2          }
  210   1      
  211   1          if(!PWM3_Flag)
  212   1          {
  213   2              PWM3_Duty++;
  214   2              if(PWM3_Duty > PWM_PERIOD) PWM3_Flag = 1;
  215   2          }
  216   1          else
  217   1          {
  218   2              PWM3_Duty--;
  219   2              if(PWM3_Duty <= 0) PWM3_Flag = 0;
  220   2          }
  221   1      
  222   1          if(!PWM4_Flag)
  223   1          {
  224   2              PWM4_Duty++;
  225   2              if(PWM4_Duty > PWM_PERIOD) PWM4_Flag = 1;
  226   2          }
  227   1          else
  228   1          {
  229   2              PWM4_Duty--;
  230   2              if(PWM4_Duty <= 0) PWM4_Flag = 0;
  231   2          }
  232   1          
  233   1          UpdatePwm();
  234   1          KeyResetScan();   //P3.2口按键触发软件复位，进入USB下载模式，不需要此功能可删除本行代码
  235   1      }
  236          
  237          
  238          //========================================================================
  239          // 函数: UpdatePwm(void)
  240          // 描述: 更新PWM占空比. 
  241          // 参数: none.
  242          // 返回: none.
  243          // 版本: V1.0, 2012-11-22
  244          //========================================================================
  245          void UpdatePwm(void)
  246          {
  247   1          PWMA_CCR1H = (u8)(PWM1_Duty >> 8); //设置占空比时间
  248   1          PWMA_CCR1L = (u8)(PWM1_Duty);
  249   1          PWMA_CCR2H = (u8)(PWM2_Duty >> 8); //设置占空比时间
  250   1          PWMA_CCR2L = (u8)(PWM2_Duty);
  251   1          PWMA_CCR3H = (u8)(PWM3_Duty >> 8); //设置占空比时间
  252   1          PWMA_CCR3L = (u8)(PWM3_Duty);
  253   1          PWMA_CCR4H = (u8)(PWM4_Duty >> 8); //设置占空比时间
  254   1          PWMA_CCR4L = (u8)(PWM4_Duty);
  255   1      }
C251 COMPILER V5.60.0,  PWM                                                                09/07/22  13:58:55  PAGE 5   

  256          
  257          //========================================================================
  258          // 函数: void delay_ms(u8 ms)
  259          // 描述: 延时函数。
  260          // 参数: ms,要延时的ms数, 这里只支持1~255ms. 自动适应主时钟.
  261          // 返回: none.
  262          // 版本: VER1.0
  263          // 日期: 2022-6-3
  264          // 备注: 
  265          //========================================================================
  266          void delay_ms(u8 ms)
  267          {
  268   1          u16 i;
  269   1          do{
  270   2              i = MAIN_Fosc / 6000;
  271   2              while(--i);   //6T per loop
  272   2          }while(--ms);
  273   1      }
  274          
  275          //========================================================================
  276          // 函数: void KeyResetScan(void)
  277          // 描述: P3.2口按键长按1秒触发软件复位，进入USB下载模式。
  278          // 参数: none.
  279          // 返回: none.
  280          // 版本: VER1.0
  281          // 日期: 2022-6-11
  282          // 备注: 
  283          //========================================================================
  284          void KeyResetScan(void)
  285          {
  286   1          if(!P32)
  287   1          {
  288   2              if(!Key_Flag)
  289   2              {
  290   3                  Key_cnt++;
  291   3                  if(Key_cnt >= 1000)         //连续1000ms有效按键检测
  292   3                  {
  293   4                      Key_Flag = 1;           //设置按键状态，防止重复触发
  294   4      
  295   4                      USBCON = 0x00;      //清除USB设置
  296   4                      USBCLK = 0x00;
  297   4                      IRC48MCR = 0x00;
  298   4                      
  299   4                      delay_ms(10);
  300   4                      IAP_CONTR = 0x60;   //触发软件复位，从ISP开始执行
  301   4                      while (1);
  302   4                  }
  303   3              }
  304   2          }
  305   1          else
  306   1          {
  307   2              Key_cnt = 0;
  308   2              Key_Flag = 0;
  309   2          }
  310   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       744     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        22     ------
C251 COMPILER V5.60.0,  PWM                                                                09/07/22  13:58:55  PAGE 6   

  bit size             =         6     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        33     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
